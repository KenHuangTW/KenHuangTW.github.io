[{"title":"Hexo留言板 - Disqus(使用 Next 主題)","url":"/2022/09/06/HowToSetDisqus/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>昨天晚上吃完烤肉跑回來繼續搞留言區，但為了這個 Disqus 我竟然搞了一個小時。<br>在設定的時候整個都跑不太出來也不知道為什麼，後來在自己摸索跟看網路上的文章才知道哪裡做錯了。<br>所以我決定把這過程重新記錄下來，也當作筆記跟教學給大家參考</p>\n<h1 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h1><p><strong>HEXO 5.4.2</strong><br><strong>HEXO-cli 4.3.0</strong><br><strong>node.js 16.13.0</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"為什麼選擇Disqus\"><a href=\"#為什麼選擇Disqus\" class=\"headerlink\" title=\"為什麼選擇Disqus\"></a>為什麼選擇Disqus</h1><p>我的理由超級簡單，因為比較好看而且不用像utterances只能綁GitHub<br>而且他的設定在Next主題也是方常方便的</p>\n<h1 id=\"安裝流程-官網\"><a href=\"#安裝流程-官網\" class=\"headerlink\" title=\"安裝流程 - 官網\"></a>安裝流程 - 官網</h1><p>首先我們要先去 <a href=\"https://disqus.com/\"><strong>Disqus 的官方網站</strong></a>註冊帳號，首先我們按下 <strong>Get Started</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus1.png\"></p>\n<p>再來選擇 <strong>I want to install Disqus on my site</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus2.png\"></p>\n<p><strong>這邊很重要，Website Name一定要知道，順便把網址複製下來</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus3.png\"></p>\n<p><strong>再來選擇最下面基本的方案就好，如果你已經財富自由，可以無視物價點一碗大碗牛肉麵，<del>可以先捐一點給我</del>，可以選擇上面的方案看看</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus4.png\"></p>\n<p><strong>因為我們用的是Hexo，所以選擇最下面的</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus5.png\"></p>\n<p><strong>最後按下 Configure 就好了</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus6.png\"></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"安裝流程-Hexo-部分\"><a href=\"#安裝流程-Hexo-部分\" class=\"headerlink\" title=\"安裝流程 - Hexo 部分\"></a>安裝流程 - Hexo 部分</h1><p>先說，每個人的主題因人而異，我這邊都採用Next主題去做設定，不同主題可能要自行調整，或是你要複製剛才那一段 Script去一個一個貼也可以，但我覺得麻煩，所以我選擇一次用好</p>\n<p>我們先到 <code>themes\\next\\_config.yml</code> 這個路徑<br>找到 disqus 這行<br>並且填入設定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  shortname: 你剛剛輸入的Website Name</span><br><span class=\"line\">  count: true  # 記留言次數的，看要不要開</span><br></pre></td></tr></table></figure>\n\n<p>然後，超級注意，避免一些不必要的錯誤，把剛才複製的網址，從 Disqus.com 之前全部複製貼上到 shortname</p>\n<p>因為我當初就是因為一個下底線爆炸的…我一開始完全不知道是這個原因，後來看了對岸某文章(我找不到是哪一篇了)才給我靈感要從網址複製</p>\n<p>好，輸入完就完成啦<br><img src=\"/2022/09/06/HowToSetDisqus/disqus7.png\"></p>\n<h1 id=\"顯示語言更改\"><a href=\"#顯示語言更改\" class=\"headerlink\" title=\"顯示語言更改\"></a>顯示語言更改</h1><p>目前大部分語言已經不用去改檔案了，直接到官網設定修改就好了</p>\n<p>首先，一樣去<a href=\"https://disqus.com/\">官網</a>，不過這次要點選<strong>右上角的小頭像</strong>，並且點選<strong>Admin</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus8.png\"></p>\n<p>點選之後在上方選單找到<strong>Setting</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus9.png\"></p>\n<p>再來點選 Edit<br><img src=\"/2022/09/06/HowToSetDisqus/disqus10.png\"></p>\n<p>先點選左下角 Sites 在選擇我們要修改的 Site<br><img src=\"/2022/09/06/HowToSetDisqus/disqus11.png\"></p>\n<p>最後選擇語言，<strong>而且一定要按下 Save 儲存</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus12.png\"></p>\n<p>這樣就大功告成啦~~<br><img src=\"/2022/09/06/HowToSetDisqus/disqus13.png\"></p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://guiblogs.com/hexo30-13/\">Gui Blog - 網站的工具人</a><br><a href=\"https://bambrow.com/20211130-hexo-comment-disqus/\">Bambrow’s Blog</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10242269\">【Day 8】如何安裝 Disqus 留言板</a></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>以上就是簡單的 Disqus 設定，如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>\n","categories":["Hexo"],"tags":["Hexo","Disqus","Note"]},{"title":"Python sqlalchemy note — 2","url":"/2022/09/05/PythonSqlalchemy2/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>這次要來繼續說明 <strong>sqlalchemy</strong> 的更多操作，如果沒有看過<a href=\"https://kenhuangtw.github.io/2022/09/05/PythonSqlalchemy1/#more\">第一篇</a>的朋友們，可以先去看<a href=\"https://kenhuangtw.github.io/2022/09/05/PythonSqlalchemy1/#more\">第一篇</a></p>\n<span id=\"more\"></span>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>篩選資料注意事項<br>在 sqlalchemy 使用 filter 篩選資料的時候<br>單純只使用 <code>filter()</code> 只會回傳 SQL 的語法回來</p>\n<p>必需要在後面再加上其他方法，例如: <code>all()</code>或是 <code>one()</code> 來獲取我們要的資料</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">class_query = session.query(Student).<span class=\"built_in\">filter</span>(class_ == <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 上述的方式會回傳的是一個 orm.query.Query的物件，印出來是 SQL 的語法</span></span><br><span class=\"line\">all_query = session.query(Student).<span class=\"built_in\">filter</span>(Student.class_ == <span class=\"number\">1</span>).<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"comment\"># 這個方式會回傳一個 list, 裡面包含所有的結果</span></span><br><span class=\"line\">one_query = session.query(Student).<span class=\"built_in\">filter</span>(Student.class_ == <span class=\"number\">1</span>).one()</span><br><span class=\"line\"><span class=\"comment\"># 回傳一個 query 裡面的 Table 的物件</span></span><br></pre></td></tr></table></figure>\n\n<p>然而在使用 <code>one()</code> 需要特別注意一件事情</p>\n<blockquote>\n<p>只要符合條件的資料超過一筆就會引發一個 sqlalchemy.exc.MultipleResultsFound 的錯誤，在使用時一定要特別注意</p>\n</blockquote>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"多個條件篩選\"><a href=\"#多個條件篩選\" class=\"headerlink\" title=\"多個條件篩選\"></a>多個條件篩選</h1><p>只要條件越多，使用 ORM 絕對會比使用 SQL 的語法方便不少，更不用說我們還是在 python 上寫這些，要是要一個一個用 SQL 語法也不是不行，就把語法當作字串就好，再變成格式化字串填入我們要填的條件，不過這樣就會非常麻煩、難以維護而且看起來很醜。</p>\n<p>扯遠了，假設我們今天要篩選 一班 和 二班 的學生，總不可能我們去下兩次 filter 吧，這樣只要條件一多，肯定是打 filter 打到晚上睡覺都會夢到。</p>\n<blockquote>\n<p>為了因應這個情況，sqlalchemy 提供了 model 一個方法，就是 .in_()。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = session.query(Student).<span class=\"built_in\">filter</span>(Student.class_.in_([<span class=\"number\">1</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\"># 這樣就會去尋找 Student 裡面所有 1班、2班的學生</span></span><br></pre></td></tr></table></figure>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>這個情況還算非常簡單的，我們再更複雜一點，我們不只要所有 1班 和 2班的學生，座號小於5號的，我們全部都要。</p>\n<p>這時候我們可以這麼做</p>\n<blockquote>\n<p>先使用一個容器儲存全部的條件，再一次解開</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">condition = [Student.class_.in_([<span class=\"number\">1</span>, <span class=\"number\">2</span>]), Student.number &lt; <span class=\"number\">5</span>]</span><br><span class=\"line\">data = session.query(Student).<span class=\"built_in\">filter</span>(*condition).<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"comment\"># 回傳一個list，裡面包含 1.2班 &quot;且&quot; 座號小於五號的</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不是用 and 的情況，要改用 or 呢?<br>那這時我們可以從 sqlalchemy 裡面導入 <code>or_</code> 來幫助我們實現這些條件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> or_</span><br><span class=\"line\"></span><br><span class=\"line\">condition = [Student.class_.in_([<span class=\"number\">1</span>, <span class=\"number\">2</span>]), Student.number &lt; <span class=\"number\">5</span>]</span><br><span class=\"line\">data = session.query(Student).<span class=\"built_in\">filter</span>(or_(*condition)).<span class=\"built_in\">all</span>()</span><br></pre></td></tr></table></figure>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"更新資料\"><a href=\"#更新資料\" class=\"headerlink\" title=\"更新資料\"></a>更新資料</h1><p>我們可以用幾種方式更新資料，這邊簡單介紹兩種</p>\n<p>第一種: 一個一個慢慢來</p>\n<p>這種情況比較適合少量更新，例如：小瑪莉改名字了，改成Amy</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = session.query(Student).<span class=\"built_in\">filter</span>(<span class=\"string\">&quot;name&quot;</span>).one()  <span class=\"comment\"># 直接回傳物件studnet.name = &quot;Amy&quot;</span></span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 儲存資料</span></span><br><span class=\"line\">session.close()  <span class=\"comment\"># 關閉</span></span><br></pre></td></tr></table></figure>\n\n<p>第二種情況: 一次更新所有符合條件的資料</p>\n<p>這種情況就很適合大量的更新，例如：全班都改名成杰哥</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = session.query(Student).<span class=\"built_in\">filter</span>().update(&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;杰哥&quot;</span>&#125;)</span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 儲存資料</span></span><br><span class=\"line\">session.close()  <span class=\"comment\"># 關閉</span></span><br></pre></td></tr></table></figure>\n<p>這樣種方式在需要大量更新的情況下非常好用，只要把<code>filter()</code>的條件設定好，後面接一個update()的方法最後儲存資料就好</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"刪除資料\"><a href=\"#刪除資料\" class=\"headerlink\" title=\"刪除資料\"></a>刪除資料</h1><p>和<code>.update()</code>相似，可以在Query這個物件後面加上<code>.delete()</code>這個方法</p>\n<p>例如: 刪除所有叫做杰哥的學生</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">session.query(Student).<span class=\"built_in\">filter</span>(Student.name == <span class=\"string\">&quot;杰哥&quot;</span>).delete()</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\">session.close()</span><br></pre></td></tr></table></figure>\n<p>如果不使用Query這個物件來做刪除有沒有辦法呢?</p>\n<p>當然有的，我們可以用session的<code>.delete()</code>方法，在<code>.delete()</code>裡面放入我們要刪除的 model物件 就可以了</p>\n<p>例如: 刪除 2年級的學生</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = session.query(Student).<span class=\"built_in\">filter</span>(Student.grade == <span class=\"number\">2</span>)</span><br><span class=\"line\">session.delete(student)</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\">session.colse()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://docs.sqlalchemy.org/en/14/\">官方文件</a></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>以上就是簡單的 sqlalchemy 介紹，如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["Python","ORM"],"tags":["Note","Python","Sqlalchemy"]},{"title":"Swift如何在windows系統和Linux上安裝","url":"/2022/09/05/SwiftInstall/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上個月剛入手了一台 M1pro版本的 macPro 做為學習 swift 以及寫 sideproject 的生產力工具。</p>\n<p>其實之前就想嘗試在 Linux 和 Windows 上跑 swift，只是那時候卡在一個問題：這兩個平台都沒辦法運行 Xcode</p>\n<p>Xcode 作為一個 IDE，他最強大的功能就是可以讓你邊寫邊看程式在裝置上的結果如何，但可惜其他平台找了那麼久終究沒有找到方法(歡迎各路大神提供方法)</p>\n<p>不過我本身比較習慣看大螢幕，也比較習慣我桌機的鍵盤(在筆電上打字速度降低 50%…</p>\n<p>所以這幾天半夜睡不著就決定研究怎麼在 Windows 還有 Linux 上安裝 swift</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h1><p>我們先到 <strong><a href=\"https://www.swift.org/download/\">官方網站下載</a></strong> 我們要的 Swift 版本，並且安裝<br><img src=\"/2022/09/05/SwiftInstall/swiftinstall.png\"></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"Windows系統\"><a href=\"#Windows系統\" class=\"headerlink\" title=\"Windows系統\"></a>Windows系統</h1><p>之後到搜尋用系統管理者權限開啟 x64 Native Tools Command Prompt for VS 2019</p>\n<p>再來執行以下指令</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\ucrt.modulemap &quot;<span class=\"variable\">%UniversalCRTSdkDir%</span>\\Include\\<span class=\"variable\">%UCRTVersion%</span>\\ucrt\\module.modulemap&quot;</span><br><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\visualc.modulemap &quot;<span class=\"variable\">%VCToolsInstallDir%</span>\\include\\module.modulemap&quot;</span><br><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\visualc.apinotes &quot;<span class=\"variable\">%VCToolsInstallDir%</span>\\include\\visualc.apinotes&quot;</span><br><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\winsdk.modulemap &quot;<span class=\"variable\">%UniversalCRTSdkDir%</span>\\Include\\<span class=\"variable\">%UCRTVersion%</span>\\um\\module.modulemap&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>之後我們的資料夾需要有這樣的路徑</strong><br>C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr\\lib\\swift\\windows\\x86_64</p>\n<p>&#96;&#96;在這邊我有遇到一個問題是，\\lib\\swift\\之後的都沒有了，不過沒關係<br>我們到<br>C:\\Library\\Developer\\Platforms\\Windows.platform\\Developer\\SDKs\\Windows.sdk\\usr\\lib\\swift\\windows</p>\n<p>把 \\lib 之後的 copy 過去就大功告成了</p>\n<p>我們來測試看看是否能運作呢</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接著執行</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">swiftc -o hello.exe hello.swift</span><br><span class=\"line\">hello.exe</span><br></pre></td></tr></table></figure>\n<p>有跑出Hello World就正確囉</p>\n<p><span style=\"border-bottom: thick double #32a1ce;\">hello.exe 可以換成你想要的任何名稱</span></p>\n<p><span style=\"border-bottom: thick double #32a1ce;\">hello.swift 是要編譯的檔名</span></p>\n<blockquote>\n<p>不過這個方法有個問題就是他沒辦法像 macOS 一樣輸入 swift 之後就有互動模式</p>\n</blockquote>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"WSL-2-安裝-swift\"><a href=\"#WSL-2-安裝-swift\" class=\"headerlink\" title=\"WSL 2 安裝 swift\"></a>WSL 2 安裝 swift</h1><p>檔案我們使用 Ubuntu 的，下載完記得解壓縮</p>\n<h2 id=\"WSL-2-的事前準備\"><a href=\"#WSL-2-的事前準備\" class=\"headerlink\" title=\"WSL 2 的事前準備\"></a>WSL 2 的事前準備</h2><p>當然要先安裝好 wsl2</p>\n<p>這邊提供一些官方說明，有興趣的朋友自己去看，這邊暫時不介紹</p>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-tw/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\">WSL安裝前的事前準備 - 啟動HyperV</a><br><a href=\"https://docs.microsoft.com/zh-tw/windows/wsl/install\">WSL安裝</a><br><a href=\"https://docs.microsoft.com/zh-tw/windows/wsl/install-manual?source=recommendations\">另一個安裝方法 - 我個人用這個</a><br><a href=\"https://www.google.com.tw/?hl=zh_TW\">知識泉源</a></p>\n</blockquote>\n<h2 id=\"安裝-swift\"><a href=\"#安裝-swift\" class=\"headerlink\" title=\"安裝 swift\"></a>安裝 swift</h2><p>我們需要先有 bashrc</p>\n<p>如果沒有：<a href=\"https://askubuntu.com/questions/127056/where-is-bashrc\">教學</a></p>\n<p>再來我們輸入下面這個指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/mnt/your_swift_file_path/swift-5.6.2-RELEASE-ubuntu20.04/usr/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>再來我們就可以檢查看看有沒有安裝完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">swift --version</span><br></pre></td></tr></table></figure>\n\n<p>有出現版本就代表完成了</p>\n<p>只是他一樣也沒有互動模式這樣<br>而且好像還要每次都重打上面那個指令</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"Linux-上安裝-Swift-這邊使用-Ubuntu-20-04-LTS\"><a href=\"#Linux-上安裝-Swift-這邊使用-Ubuntu-20-04-LTS\" class=\"headerlink\" title=\"Linux 上安裝 Swift (這邊使用 Ubuntu 20.04 LTS)\"></a>Linux 上安裝 Swift (這邊使用 Ubuntu 20.04 LTS)</h1><p>下載完之後我們開啟 Terminal，可以到Downloads資料夾右鍵開啟，或示輸入指令切換到 Downloads 資料夾</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/Downloads</span><br></pre></td></tr></table></figure>\n\n<p>再來輸入指令解壓縮</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tar xzf your_download_swift_file</span><br></pre></td></tr></table></figure>\n\n<p>再來轉移到另一個資料夾 &#x2F;usr&#x2F;share&#x2F;swift 底下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mv</span> your_tar_swift_file /usr/share/swift</span><br></pre></td></tr></table></figure>\n\n<p>最後設置為環境變數</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=/usr/share/swift/usr/bin:<span class=\"variable\">$PATH</span>&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>再來測試</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">swift -version</span><br></pre></td></tr></table></figure>\n\n<p>有跑出版本就代表安裝完成了</p>\n<p>再來 Linux上是可以輸入 swift 指令的，而且速度海放 Windows 好幾條街</p>\n<p>個人比較推薦在 Linux 上安裝(當然你有macOS的電腦就不用理我了</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h1><p>這幾個方法充其量就是給大家練習 swift 的基本語法而已，真的要開發 ios 的程式還是要自己去買一台蘋果電腦，畢竟這只能看語法有沒有問題而以，沒辦法觀看執行結果。</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"聲明\"><a href=\"#聲明\" class=\"headerlink\" title=\"聲明\"></a>聲明</h1><p>本人只是將安裝 Swift 的過程記錄下來，並且整合成一篇筆記<br>如有侵權煩請告知<br>This writings just record the swift install process. If infringement, please be informed.</p>\n<h1 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h1><p><a href=\"https://www.swift.org/download/\">https://www.swift.org/download/</a><br><a href=\"https://opensourcedoc.com/blog/swift-on-windows/\">https://opensourcedoc.com/blog/swift-on-windows/</a><br><a href=\"https://blog.csdn.net/zaiduoluo/article/details/106544944\">https://blog.csdn.net/zaiduoluo/article/details/106544944</a><br><a href=\"https://askubuntu.com/questions/127056/where-is-bashrc\">https://askubuntu.com/questions/127056/where-is-bashrc</a><br><a href=\"https://ubunlog.com/zh-TW/swift-instala-este-lenguaje-de-programacion-en-ubuntu-20-04/\">https://ubunlog.com/zh-TW/swift-instala-este-lenguaje-de-programacion-en-ubuntu-20-04/</a></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["Swift","Install"],"tags":["Swift"]},{"title":"Python sqlalchemy note — 1","url":"/2022/09/05/PythonSqlalchemy1/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>第一次嘗試寫blog，怕不寫下來兩個星期以後都忘記了，現在還很菜，鞭小力一點。</p>\n<p>這次的主題是python上熱門的ORM工具 — <strong>sqlalchemy</strong>。</p>\n<p>起初在寫一個有關於成績分析的sideproject，因為使用到資料庫做為儲存資料的方式，所以免不了的需要對資料庫的表格進行一些操作，原本的想法是使用 python 的 module 去做，但寫到一半發現，要是一個一個用 SQL 的語法寫下去，後面維護起來肯定是直接送急診。</p>\n<p>於是乎就開始思考，有沒有什麼方式可以解決我的困擾。<br>剛好工作的關係，接觸到了一種可以方便使用者對資料庫執行操作的方式 — <strong>ORM</strong>。</p>\n<span id=\"more\"></span>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"ORM-是什麼\"><a href=\"#ORM-是什麼\" class=\"headerlink\" title=\"ORM 是什麼\"></a>ORM 是什麼</h1><p>ORM(Object Relational Mapping)是一種程式設計技術，用於實現物件導向程式語言裡不同類型系統的資料之間的轉換。</p>\n<blockquote>\n<p><strong>用最白話的方式來說，就是一個中繼站的概念，幫我們去和資料庫做溝通，我們可以用ORM的語法來撰寫程式就好。</strong></p>\n</blockquote>\n<p>什麼意思呢? 舉例：假設我們今天有一個 Table 叫做 Student</p>\n<p><img src=\"/2022/09/05/PythonSqlalchemy1/demotable.png\"></p>\n<p>如果今天我們要查詢所有一年級的學生，在SQL的語法裡面我們會這樣寫</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> &quot;Student&quot; <span class=\"keyword\">WHERE</span> &quot;grade&quot; <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣看起來好像還好</p>\n<p>但如果我們今天表格之間的關係開始複雜起來呢</p>\n<p>你可能中間需要先去查詢別的表格的 id，再拿回來當作條件，同時又需要一起輸出出來，甚至還要根據使用者的條件來做篩選。可能就有機會長成這樣:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> (&quot;table.ele1&quot;, &quot;table.ele2&quot;, &quot;number&quot;, &quot;name&quot;)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &quot;student&quot;</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">JOIN</span> &quot;table&quot;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> &quot;table&quot;.&quot;id&quot; <span class=\"operator\">=</span> &quot;student&quot;.id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"keyword\">condition</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> anthor <span class=\"keyword\">condition</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> anthor <span class=\"keyword\">condition</span> again</span><br></pre></td></tr></table></figure>\n\n<p>這樣看起來就麻煩了不少，不幸的是這個狀況在這個專案一定會出現而且頻率非常高。</p>\n<p>這時就可以讓我們的ORM派上用場，省下我們寶貴的時間。</p>\n<blockquote>\n<p>最大的優點就是直接用ORM的語法來代替上面那一串又臭又長的SQL語法，另外還可以提升安全性。</p>\n</blockquote>\n<p>雖然我不是時間管理大師，但這聽起來很棒對吧?</p>\n<p>你說這個東西厲害到成仙了，難道他沒有缺點嗎。<br>當然有，方便換來的就是效能上的犧牲。我們沒辦法一個一個用SQL的語法來最佳化查詢的效能。</p>\n<p>但我認為在這個效能飛起的時代，這是可以接受的。</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"實際應用\"><a href=\"#實際應用\" class=\"headerlink\" title=\"實際應用\"></a>實際應用</h1><p>首先我們要先建立與資料庫的連線(以下以 postgresql 為例)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlalchemy</span><br><span class=\"line\"></span><br><span class=\"line\">engine = sqlalchemy.create_engine(</span><br><span class=\"line\">    <span class=\"string\">&#x27;postgresql://username:password@your_ip:yourportyour_database_name&#x27;</span>, echo=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 結構: 資料庫名稱://使用者名稱:密碼@資料庫ip:資料庫port/資料庫名稱</span></span><br></pre></td></tr></table></figure>\n<p>這樣就可以建立好一個連線了</p>\n<p>如果是其他資料庫的話，可以參考<a href=\"https://docs.sqlalchemy.org/en/14/core/engines.html\">官方文件</a></p>\n<p>建立好連線之後我們要來定義一個新的Table</p>\n<ul>\n<li>這個 Table 叫做 students</li>\n<li>Primary Key 是 id 且會自動生成數字</li>\n<li>grade, class, number 是唯一組合的</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, Boolean  <span class=\"comment\"># 型別</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base </span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> UniqueConstraint  <span class=\"comment\"># 唯一組合</span></span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;students&#x27;</span>  <span class=\"comment\"># 表格名稱</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(<span class=\"string\">&#x27;id&#x27;</span>, Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = Column(<span class=\"string\">&#x27;name&#x27;</span>, String(<span class=\"number\">20</span>), nullable=<span class=\"literal\">False</span>)  <span class=\"comment\"># 20為最大長度</span></span><br><span class=\"line\">    grade = Column(<span class=\"string\">&#x27;grade&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    class_  = Column(<span class=\"string\">&#x27;class&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    number = Column(<span class=\"string\">&#x27;number&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    UniqueConstraint(grade, class_, number, name=<span class=\"string\">&#x27;basic_info&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, number, grade, class_</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.number = number</span><br><span class=\"line\">        self.grade = grade</span><br><span class=\"line\">        self.class_ = class_</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回傳要顯示的資料</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;student(&#x27;%s&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;)&gt;&quot;</span>%(</span><br><span class=\"line\">            self.name, self.grade, self.class_, self.number)</span><br><span class=\"line\"></span><br><span class=\"line\">Base.metadata.create_all(engine)  <span class=\"comment\"># 建立所有表格</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣我們就建立好一個 Table 了</p>\n<p>再來我們要新增一筆資料進去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"></span><br><span class=\"line\">value = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;大偉&quot;</span>, <span class=\"string\">&quot;grade&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;class_&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;number&quot;</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\">session = Session()</span><br><span class=\"line\">session.add(Students(**values))</span><br><span class=\"line\"><span class=\"comment\"># 也可以使用 session.add(Student(&quot;大偉&quot;, 1, 1, 1))</span></span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 記得儲存</span></span><br></pre></td></tr></table></figure>\n\n<p>你說我們有沒有快一點的方式</p>\n<p>當然有的，我們可以改用 add_all 這個方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student_value = [Student(<span class=\"string\">&quot;阿明&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>), Student(<span class=\"string\">&quot;小瑪莉&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)]</span><br><span class=\"line\">session.add_all(student_value)</span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 記得儲存</span></span><br></pre></td></tr></table></figure>\n\n<p>最後我們來查詢資料</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = session.query(Student)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<p>以下是完整的程式碼</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlalchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> select</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, Boolean  <span class=\"comment\"># 型別</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> UniqueConstraint</span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Students</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;students&#x27;</span>  <span class=\"comment\"># 表格名稱</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(<span class=\"string\">&#x27;id&#x27;</span>, Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = Column(<span class=\"string\">&#x27;name&#x27;</span>, String(<span class=\"number\">20</span>), nullable=<span class=\"literal\">False</span>)  <span class=\"comment\"># 20為最大長度</span></span><br><span class=\"line\">    grade = Column(<span class=\"string\">&#x27;grade&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    class_  = Column(<span class=\"string\">&#x27;class&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    number = Column(<span class=\"string\">&#x27;number&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    UniqueConstraint(grade, class_, number, name=<span class=\"string\">&#x27;basic_info&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, number, grade, class_</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.number = number</span><br><span class=\"line\">        self.grade = grade</span><br><span class=\"line\">        self.class_ = class_</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回傳要顯示的資料</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;student(&#x27;%s&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;)&gt;&quot;</span>%(</span><br><span class=\"line\">            self.name, self.grade, self.class_, self.number)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    engine = sqlalchemy.create_engine(yoursql_info)  <span class=\"comment\"># 排版問題請往上看</span></span><br><span class=\"line\">    Session = sessionmaker(bind=engine)</span><br><span class=\"line\">    session = Session()</span><br><span class=\"line\">    Base.metadata.create_all(engine)  <span class=\"comment\"># 建立 Table</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    value = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;大偉&quot;</span>, <span class=\"string\">&quot;grade&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;class_&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;number&quot;</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    session.add(Student(**values))  <span class=\"comment\"># 新增資料進去 Table </span></span><br><span class=\"line\">    student_value = [Student(<span class=\"string\">&quot;阿明&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>), Student(<span class=\"string\">&quot;小瑪莉&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)]</span><br><span class=\"line\">    session.add_all(student_value)  <span class=\"comment\"># 一次新增多筆</span></span><br><span class=\"line\">    <span class=\"comment\"># 取得 &quot;所有&quot; 資料</span></span><br><span class=\"line\">    data = session.query(Student)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    session.commit()  <span class=\"comment\"># 儲存資料</span></span><br><span class=\"line\">    session.close()  <span class=\"comment\"># 關閉 </span></span><br></pre></td></tr></table></figure>\n\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://zh.wikipedia.org/zh-tw%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84\">Wiki</a><br><a href=\"https://docs.sqlalchemy.org/en/14/\">官方文件</a></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>以上就是簡單的 sqlalchemy 介紹，如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>\n","categories":["Python","ORM"],"tags":["Note","Python","Sqlalchemy"]}]