[{"title":"Codewars - RGB To Hex Conversion (Use Swift)","url":"/2022/10/08/Codewars-RGB-Use-Swift/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>這篇單純記錄我遇到一些不熟悉的地方而已</p>\n<p><a href=\"https://www.codewars.com/kata/513e08acc600c94f01000001\">我們先來看題目 - RGB To Hex Conversion</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h1><p>題目非常簡單，就是轉成色碼而已，所以大於 255(FF) 或是 小於 0 的都是無效的，題目要求我們把它變成最接近的數值也就是</p>\n<blockquote>\n<p>大於255就當做255，小於0當做0</p>\n</blockquote>\n<p>所以這邊我們可以額外寫一個函式，專門處理範圍的</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">limit</span>(<span class=\"keyword\">_</span> <span class=\"params\">color</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(<span class=\"number\">255</span>, <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, color))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下來就可以處理字串了</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">rgb</span>(<span class=\"keyword\">_</span> <span class=\"params\">r</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">g</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%02X%02X%02X&quot;</span>, limit(r), limit(g), limit(b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣就完成了</p>\n<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><p>第一個 limit 這個函式，簡單來說就式處理範圍的(廢話)<br>第二個就是題目要求我們需要回傳的字串，使用<code>String(format: &quot;yourformat&quot;, argument: yourargument)</code>來達成我們要的，其中<br><code>%02X</code>代表:</p>\n<blockquote>\n<p>使用十六進位且大寫(X 的部份)，並且不足2位數就補0(02的部份)</p>\n</blockquote>\n<p>這樣就可以達到題目的要求了<br>完整程式碼如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">limit</span>(<span class=\"keyword\">_</span> <span class=\"params\">color</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(<span class=\"number\">255</span>, <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, color))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">rgb</span>(<span class=\"keyword\">_</span> <span class=\"params\">r</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">g</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%02X%02X%02X&quot;</span>, limit(r), limit(g), limit(b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["Swift","Codewars"],"tags":["Swift"]},{"title":"Hexo留言板 - Disqus(使用 Next 主題)","url":"/2022/09/06/HowToSetDisqus/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>昨天晚上吃完烤肉跑回來繼續搞留言區，但為了這個 Disqus 我竟然搞了一個小時。<br>在設定的時候整個都跑不太出來也不知道為什麼，後來在自己摸索跟看網路上的文章才知道哪裡做錯了。<br>所以我決定把這過程重新記錄下來，也當作筆記跟教學給大家參考</p>\n<h1 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h1><p><strong>HEXO 5.4.2</strong><br><strong>HEXO-cli 4.3.0</strong><br><strong>node.js 16.13.0</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"為什麼選擇Disqus\"><a href=\"#為什麼選擇Disqus\" class=\"headerlink\" title=\"為什麼選擇Disqus\"></a>為什麼選擇Disqus</h1><p>我的理由超級簡單，因為比較好看而且不用像utterances只能綁GitHub<br>而且他的設定在Next主題也是方常方便的</p>\n<h1 id=\"安裝流程-官網\"><a href=\"#安裝流程-官網\" class=\"headerlink\" title=\"安裝流程 - 官網\"></a>安裝流程 - 官網</h1><p>首先我們要先去 <a href=\"https://disqus.com/\"><strong>Disqus 的官方網站</strong></a>註冊帳號，首先我們按下 <strong>Get Started</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus1.png\"></p>\n<p>再來選擇 <strong>I want to install Disqus on my site</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus2.png\"></p>\n<p><strong>這邊很重要，Website Name一定要知道，順便把網址複製下來</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus3.png\"></p>\n<p><strong>再來選擇最下面基本的方案就好，如果你已經財富自由，可以無視物價點一碗大碗牛肉麵，<del>可以先捐一點給我</del>，可以選擇上面的方案看看</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus4.png\"></p>\n<p><strong>因為我們用的是Hexo，所以選擇最下面的</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus5.png\"></p>\n<p><strong>最後按下 Configure 就好了</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus6.png\"></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"安裝流程-Hexo-部分\"><a href=\"#安裝流程-Hexo-部分\" class=\"headerlink\" title=\"安裝流程 - Hexo 部分\"></a>安裝流程 - Hexo 部分</h1><p>先說，每個人的主題因人而異，我這邊都採用Next主題去做設定，不同主題可能要自行調整，或是你要複製剛才那一段 Script去一個一個貼也可以，但我覺得麻煩，所以我選擇一次用好</p>\n<p>我們先到 <code>themes\\next\\_config.yml</code> 這個路徑<br>找到 disqus 這行<br>並且填入設定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  shortname: 你剛剛輸入的Website Name</span><br><span class=\"line\">  count: true  # 記留言次數的，看要不要開</span><br></pre></td></tr></table></figure>\n\n<p>然後，超級注意，避免一些不必要的錯誤，把剛才複製的網址，從 Disqus.com 之前全部複製貼上到 shortname</p>\n<p>因為我當初就是因為一個下底線爆炸的…我一開始完全不知道是這個原因，後來看了對岸某文章(我找不到是哪一篇了)才給我靈感要從網址複製</p>\n<p>好，輸入完就完成啦<br><img src=\"/2022/09/06/HowToSetDisqus/disqus7.png\"></p>\n<h1 id=\"顯示語言更改\"><a href=\"#顯示語言更改\" class=\"headerlink\" title=\"顯示語言更改\"></a>顯示語言更改</h1><p>目前大部分語言已經不用去改檔案了，直接到官網設定修改就好了</p>\n<p>首先，一樣去<a href=\"https://disqus.com/\">官網</a>，不過這次要點選<strong>右上角的小頭像</strong>，並且點選<strong>Admin</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus8.png\"></p>\n<p>點選之後在上方選單找到<strong>Setting</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus9.png\"></p>\n<p>再來點選 Edit<br><img src=\"/2022/09/06/HowToSetDisqus/disqus10.png\"></p>\n<p>先點選左下角 Sites 在選擇我們要修改的 Site<br><img src=\"/2022/09/06/HowToSetDisqus/disqus11.png\"></p>\n<p>最後選擇語言，<strong>而且一定要按下 Save 儲存</strong><br><img src=\"/2022/09/06/HowToSetDisqus/disqus12.png\"></p>\n<p>這樣就大功告成啦~~<br><img src=\"/2022/09/06/HowToSetDisqus/disqus13.png\"></p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://guiblogs.com/hexo30-13/\">Gui Blog - 網站的工具人</a><br><a href=\"https://bambrow.com/20211130-hexo-comment-disqus/\">Bambrow’s Blog</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10242269\">【Day 8】如何安裝 Disqus 留言板</a></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>以上就是簡單的 Disqus 設定，如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>\n","categories":["Hexo"],"tags":["Hexo","Disqus","Note"]},{"title":"【Day-1】前言","url":"/2023/09/01/IronDay1/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10314325\">it邦</a></p>\n<h1 id=\"為什麼會要寫這個主題\"><a href=\"#為什麼會要寫這個主題\" class=\"headerlink\" title=\"為什麼會要寫這個主題\"></a>為什麼會要寫這個主題</h1><p>自己身為菜鳥時，寫Code常常被前輩噴爛，說你的一些習慣不太好。直到我接觸了Clean Code這本書還有去了其他團隊，我才知道軟體的維護是非常重要的，這些後續會繼續說明。</p>\n<p>再來講另一個故事</p>\n<p>約莫6月底時，公司希望我評估某個超大型專案的時程，因為那個專案爛尾了，想要接回來做。</p>\n<p>當我一打開Code的時候，我整個眼睛真的快瞎了，我實在無法想像這個東西是資深工程師寫出來的。舉個他寫的髒扣:</p>\n<ul>\n<li>路徑命名為<code>path</code>，看起來沒什麼問題，但我看不出是哪家的path</li>\n<li>全部黏在一起不空格</li>\n<li>物件直接命名為<code>Neko</code> ，我沒找到<code>mewo()</code>這個方法我就把你變成<code>Neko</code></li>\n<li>最屌的，變數命名<code>a</code> ~ <code>z</code>都有</li>\n</ul>\n<p>身為一個不喜歡看到髒扣的人，就決定來寫這篇。</p>\n<p>這次的教學主要會以後端的角度來看軟體開發這件事<br>這個月會講講一些軟體設計的原則還有一些後端在設計API以及架構會需要注意的地方<br>會用到Python、PHP、Golang，不過都只會用來做一些說明，只有PHP會拿來寫Laravel框架的重構</p>\n<p>講解的是概念，其實也不用擔心看不懂</p>\n<span id=\"more\"></span>\n\n<h1 id=\"髒扣造成的影響\"><a href=\"#髒扣造成的影響\" class=\"headerlink\" title=\"髒扣造成的影響\"></a>髒扣造成的影響</h1><p>隨著時間時間增長，可能會有新增加的功能，或是配合市場要調整的部分，此時架構或是Code如果不夠乾淨，那維護的時間將是隨著指數增長</p>\n<p>我們引用Clean Architecture這本書中的資料</p>\n<blockquote>\n<p>「當對程式碼的整潔程度或設計的結構沒有多少想法時，那你就會跟這條曲線一樣走到最終悲慘的結局」<br>-Clean Architecture (p.6)</p>\n</blockquote>\n<p>再舉一個極端的例子</p>\n<blockquote>\n<p>「我知道有一間公司在 80 年代後期開發了一個殺手級應用，但後來發行的週期開始拖長，程式裡的錯誤也無法在下次發行之前修復，程式載入的時間與崩潰機率也愈來愈長和高。不久，這家公司就倒閉了。我問他當時發生了什麼…」<br>「急於將產品上市，導致他們的程式碼變得一團糟，當他們加入愈來愈多的產品特點時，程式碼就變得愈來愈糟糕，一直到他們再也無法管理這團混亂。劣質的程式碼導致了這家公司的倒閉」<br>-Clean Code (p.3)</p>\n</blockquote>\n<p>如果你問我說，「我的主管要求我一定要在三天內產出這個專案，那我該怎麼辦?」<br>我建議你先去看一下<strong>Clean Coder</strong>，上面有很多身為一個專業人士該做的事情和應對方式。<br>如果主管還是不合理的要求你，那我只好搬出那句話，<strong>程式跟人只要有一個能跑就好</strong>。</p>\n<blockquote>\n<p>隨時準備好可以跳槽的準備。</p>\n</blockquote>\n<h1 id=\"如何不寫髒扣\"><a href=\"#如何不寫髒扣\" class=\"headerlink\" title=\"如何不寫髒扣\"></a>如何不寫髒扣</h1><h2 id=\"語言規範\"><a href=\"#語言規範\" class=\"headerlink\" title=\"語言規範\"></a>語言規範</h2><p>我們可以先參考每個程式語言的規範文件，例如Python的<a href=\"https://peps.python.org/pep-0008/\">PEP8</a>為例子</p>\n<ul>\n<li>import 時不該把不相關的擠在一行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wrong</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Correct</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> Popen, PIPE</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 <code>is not</code> 而不是 <code>not … is</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wrong</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> foo <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Correct</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> foo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br></pre></td></tr></table></figure>\n\n<p>還有很多就不一一舉例了，在新手時期可以先照著語言的規範來做，這樣對於往後撰寫的習慣會比較好</p>\n<h2 id=\"賦予有意義的名稱\"><a href=\"#賦予有意義的名稱\" class=\"headerlink\" title=\"賦予有意義的名稱\"></a>賦予有意義的名稱</h2><p>這個應該是很多人講到爛掉了，之後會用Clean Code再做更詳細的說明</p>\n<p>假設我今天有一個function是從資料庫取得所有的<code>User email</code></p>\n<p>我們可以將取出來的資料直接清楚的命名為<code>userEmailGroup</code>或是<code>allUserEmailFromDB</code> 之類的</p>\n<p>不要用什麼data(<strong>不夠清楚</strong>)、dbData(<strong>什麼的Data</strong>)甚至是abc這種根本沒意義的</p>\n<p>如果是示範用那也就算了，在專案上拜託不要這樣寫，這麼做只會讓別人需要花心思去猜你在想什麼</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_user_email_group_from_DB</span>()-&gt; <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;示範用，取得資料庫所有user的email&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> some_DB_drive.get_some_data(<span class=\"string\">&quot;users&quot;</span>, <span class=\"string\">&quot;email&quot;</span>).<span class=\"built_in\">all</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 好的命名方式</span></span><br><span class=\"line\">user_email_group = get_user_email_group_from_DB()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不好的命名方式</span></span><br><span class=\"line\">data = get_user_email_group_from_DB()  <span class=\"comment\"># 不夠清楚，我知道是資料，但我還要額外花時間看是誰的資料</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>其他還有非常多的方法，像是在Python裡面你可以寫<code>Type Hint</code> 讓其他人更了解這個function的參數以及回傳值的型別，舉個例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_two_number</span>(<span class=\"params\">summand: <span class=\"built_in\">int</span>, addend: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> summand + addend</span><br></pre></td></tr></table></figure>\n\n<p>在Python裡面，不少型別都可以使用<code>+</code>這個運算子，例如:string, list</p>\n<p>你說function有命名阿</p>\n<p>確實有命名可是，多寫這些沒有壞處；忘了我不用再往旁邊看(貼貼❤)，而且假設我以後真的要驗證參數的型別，我就可以直接拿function裡面的type hint來用，不需要再額外定義。        </p>\n<h1 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h1><p>今天簡單介紹一下，這星期會先寫Coding Style、Clean Code以及 SOLID原則</p>\n<p>明天見。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://peps.python.org/pep-0008/\">Python PEP8</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10264853\">Day 01: 【序】– 架構與設計、代碼、工程師</a></li>\n</ul>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development"]},{"title":"【Day-3】Clean Code(上)","url":"/2023/09/03/IronDay3/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10314670\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>第三天就要來個硬的</p>\n<p>這次將要介紹<strong>Clean Code</strong></p>\n<p>之後會依序介紹<strong>Clean Coder</strong>以及<strong>Clean Architecture</strong></p>\n<p>Clean Code這本書我相信很多公司都有<del>擺著當精神象徵</del></p>\n<p>這個主題過去也有人介紹過，這次會從裡面的案例去做延伸探討</p>\n<p>而且每個人看過的想法也不太一樣</p>\n<p>書中Java的範例我就不多做說明了，<del>因為我不會寫Java</del></p>\n<p>如果沒有讀過這本書的朋友，尤其是新手或是Coding Style不太好的，強烈建議看過這本書</p>\n<p>他會對日後的你非常有幫助</p>\n<p>今天我們先從第一章節到第五章吧(迷之音: 我有點擔心我講太多…</p>\n<p>第二章到第五章分別是</p>\n<ul>\n<li>有意義的命名</li>\n<li>函式</li>\n<li>註解</li>\n<li>編排</li>\n</ul>\n<p>這些單元會放在一起講解</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Ch-1-無暇的程式碼\"><a href=\"#Ch-1-無暇的程式碼\" class=\"headerlink\" title=\"Ch.1 - 無暇的程式碼\"></a>Ch.1 - 無暇的程式碼</h1><p>我們先有一個共識:</p>\n<p><strong>程式碼品質是確實會影響維護以及開發效率的</strong></p>\n<p>舉個例子:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Success to connect server, welcome&quot;</span> . <span class=\"variable language_\">$this</span>-&gt;name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面這些最明顯有問題的就是命名</p>\n<ul>\n<li>屬性的命名，應該命名為user_name，而不該是name，前者我們可以很清楚的知道這個是user的name，而不是我還需要去對照class的名稱再來聯想</li>\n<li>函式也是，應該命名為connectServer</li>\n</ul>\n<blockquote>\n<p>***Explicit is better than implicit. </p>\n</blockquote>\n<ul>\n<li>The Zen of Python</li>\n</ul>\n<p>意旨明瞭的程式碼(user_name, connectServer)比隱晦(name, connect)的還要好***</p>\n<blockquote>\n</blockquote>\n<h2 id=\"態度\"><a href=\"#態度\" class=\"headerlink\" title=\"態度\"></a>態度</h2><p>我相信很多人都體驗過，明明一個幾分鐘的事情，卻因為架構、程式碼太髒亂而多花了很多時間</p>\n<p>很多人(我一開始也是)都會抱怨說，阿誰誰誰一直修改怎樣怎樣的</p>\n<p>但這件事情本身就沒有錯，因為人會一直改變，他們的需求也是</p>\n<p>為什麼我們的架構沒辦法改變，或是做得<strong>更有彈性一點</strong>，來因應這些需求</p>\n<h2 id=\"童子軍規則\"><a href=\"#童子軍規則\" class=\"headerlink\" title=\"童子軍規則\"></a>童子軍規則</h2><p>程式碼必須持續地保持整潔，這個原則不會因為時間而被改變</p>\n<p>美國童子軍有一個簡單的規則</p>\n<blockquote>\n<p><em><strong>離開營地前，讓營地比使用前更加乾淨。</strong></em><br><em><strong>- Clean code(p.16)</strong></em></p>\n</blockquote>\n<p>也就是說我們每次在撰寫程式碼時，必須保持乾淨整潔。</p>\n<h1 id=\"Ch2-5-程式碼的部分\"><a href=\"#Ch2-5-程式碼的部分\" class=\"headerlink\" title=\"Ch2~5 程式碼的部分\"></a>Ch2~5 程式碼的部分</h1><h2 id=\"有意義的命名\"><a href=\"#有意義的命名\" class=\"headerlink\" title=\"有意義的命名\"></a>有意義的命名</h2><p>我們掌握幾個原則</p>\n<ul>\n<li>名符其實，例如你的function是在做兩數相加(假設只是個單純的數學運算)，你可以為他命名為<code>addTwoNumber</code></li>\n<li>有意義的區別，假設你有兩個很相似的class，那info、data、數字排序(n1, n2)這些都屬於無意義的命名，因為根本分不出來是在幹嘛</li>\n<li>類別應該使用名詞或名詞片語，函式應該使用動詞或動詞片語</li>\n</ul>\n<h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$someFormater</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$someFormater</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;someFormater = <span class=\"variable\">$someFormater</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">Request <span class=\"variable\">$request</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$newStudent</span> = <span class=\"title class_\">Student</span>::<span class=\"title function_ invoke__\">create</span>([</span><br><span class=\"line\">            <span class=\"string\">&#x27;student_name&#x27;</span> =&gt; <span class=\"variable\">$request</span>-&gt;student_name,</span><br><span class=\"line\">            <span class=\"string\">&#x27;student_email&#x27;</span> =&gt; <span class=\"variable\">$request</span>-&gt;student_email]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>(<span class=\"variable\">$this</span>-&gt;<span class=\"title function_ invoke__\">someFormater</span>(<span class=\"variable\">$newStudent</span>), <span class=\"number\">201</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函式\"><a href=\"#函式\" class=\"headerlink\" title=\"函式\"></a>函式</h2><p>我們最需要在函式上注意的就是兩點：</p>\n<ul>\n<li>簡短</li>\n<li>一次只做一件事</li>\n</ul>\n<p>我們舉個MVC框架最常遇到的問題，Controller已經大包到幾百幾千行去了</p>\n<p>此時我們就可以把Controller裡面的各種功能拆給其他function去執行</p>\n<p>保持Controller的整潔</p>\n<h2 id=\"註解\"><a href=\"#註解\" class=\"headerlink\" title=\"註解\"></a>註解</h2><p>這一部分在我認為，其實最好的註解就是程式碼，也就是說，你的程式碼可以讓人一看就懂，那註解就會顯得有些多餘。</p>\n<p>我們就舉例書中需要寫註解的情況吧</p>\n<ul>\n<li>解釋做某個決定的原因</li>\n<li>對後果的告誡</li>\n<li>代辦事項</li>\n</ul>\n<h2 id=\"編排\"><a href=\"#編排\" class=\"headerlink\" title=\"編排\"></a>編排</h2><p>簡單來說就是程式的排版</p>\n<p>例如：等號之間空格、上下間距等等</p>\n<p>另外盡量<strong>讓變數靠近使用的地方被宣告，但因為函示非常簡短的關係，所以都會在最上方做宣告</strong></p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>只能說Clean Code這本書要在三天內講完，真的太困難了，只能提取其中的一部分來說明</p>\n<p>強烈建議沒有看的人去買一本來看</p>\n<p>明天繼續講其他章節</p>\n<p>希望我這三天內可以盡可能地講完</p>\n<p>其實我們就盡可能地掌握幾兩個原則，就是讓人一看就懂跟看得舒服</p>\n<p>掌握這兩個原則就不太會有寫出髒扣的問題了</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Code(ch.2 ~ 5)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Code"]},{"title":"【Day-2】Coding Style","url":"/2023/09/02/IronDay2/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10314602\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天我們會來介紹什麼是Coding Style，以及團隊的Coding Style為什麼應該統一</p>\n<span id=\"more\"></span>\n\n<h1 id=\"The-Zen-of-Python\"><a href=\"#The-Zen-of-Python\" class=\"headerlink\" title=\"The Zen of Python\"></a>The Zen of Python</h1><p>在 Python 使用 <code>import this</code> 會跳出以下資訊</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The Zen of Python, by Tim Peters</span><br><span class=\"line\"></span><br><span class=\"line\">Beautiful is better than ugly.</span><br><span class=\"line\">Explicit is better than implicit.</span><br><span class=\"line\">Simple is better than complex.</span><br><span class=\"line\">Complex is better than complicated.</span><br><span class=\"line\">Flat is better than nested.</span><br><span class=\"line\">Sparse is better than dense.</span><br><span class=\"line\">Readability counts.</span><br><span class=\"line\">Special cases aren&#x27;t special enough to break the rules.</span><br><span class=\"line\">Although practicality beats purity.</span><br><span class=\"line\">Errors should never pass silently.</span><br><span class=\"line\">Unless explicitly silenced.</span><br><span class=\"line\">In the face of ambiguity, refuse the temptation to guess.</span><br><span class=\"line\">There should be one-- and preferably only one --obvious way to do it.</span><br><span class=\"line\">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class=\"line\">Now is better than never.</span><br><span class=\"line\">Although never is often better than *right* now.</span><br><span class=\"line\">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class=\"line\">If the implementation is easy to explain, it may be a good idea.</span><br><span class=\"line\">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br></pre></td></tr></table></figure>\n\n<p>我們可以很清楚的知道 Python 強調可讀性、清楚的 Code 為原則<br>這和我們之後的Clean Code的理念是相似的</p>\n<h1 id=\"什麼是Coding-Style\"><a href=\"#什麼是Coding-Style\" class=\"headerlink\" title=\"什麼是Coding Style\"></a>什麼是Coding Style</h1><p>其實就是指每個工程師Coding的風格，舉個例子</p>\n<p>以命名來說常見的就有</p>\n<ul>\n<li>大駝峰(<em><strong>upper camel case</strong></em>)</li>\n<li>小駝峰(<em><strong>lower camel case</strong></em>)</li>\n<li>蛇型(<em><strong>snake case</strong></em>)</li>\n</ul>\n<p>還有縮排、常數、註解等等</p>\n<p>然後註解這一部分我等等會花時間特別解釋</p>\n<h2 id=\"為什麼需要統一\"><a href=\"#為什麼需要統一\" class=\"headerlink\" title=\"為什麼需要統一\"></a>為什麼需要統一</h2><p>我們一開始在學習寫程式時，通常都是一個人在寫</p>\n<p>這種時候就算你把變數命名為 <code>a</code> 也沒什麼差別，反正自己知道就好</p>\n<p>但當我們開始和其他人一起協作的時候，這時候我想團隊內的成員應該會當場中風</p>\n<p>團隊協作時，不統一的Coding Style團隊協作時，不統一的 Coding Style 會造成維護上的負擔</p>\n<p>A同事用小駝峰，B同事用蛇型</p>\n<p>一開始還好，但專案開始大起來、或是你哪天接手的時候，你可定要花上一段時間去Study前人到底在幹嘛<br>為了避免這種狀況，團隊中的Coding Style統一就非常重要</p>\n<h2 id=\"髒亂程式碼的代價\"><a href=\"#髒亂程式碼的代價\" class=\"headerlink\" title=\"髒亂程式碼的代價\"></a>髒亂程式碼的代價</h2><p>隨著專案擴大，當程式碼越做越多時，開發時間會越來長<br>但雜亂無章的程式碼到最後只會讓開發效率無限趨近於0，此時公司就只能請更多人來維護跟撰寫<br>此時新人如果不知道會不會有改了A就影響到B的狀況，又加上有時程壓力的話就容易導致持續產出髒扣<br>最終就變成一個無限迴圈</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_code_dirty</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"variable\">$is_code_dirty</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;PM: 我們需要某某功能喔&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;程式碼太糟糕了怎麼辦，東西改不完啦!!!&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;有了應徵新的人吧!!!&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;!@#!@，這些事什麼鬼???&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;不行了，Deadline要到了，不管了隨便寫啦&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;呼，完成了~&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$is_code_dirty</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這個做法就完全是在帶來麻煩(<del>aka創造職缺</del>)</p>\n<h1 id=\"註解\"><a href=\"#註解\" class=\"headerlink\" title=\"註解\"></a>註解</h1><p>關於註解這一部分我想特別挑出來說的原因就是，其實程式碼邏輯且命名清楚<br>這種情況下就不太需要寫註解</p>\n<p>這派的人主張，通常寫註解的原因是因為Code寫太爛才需要</p>\n<p>舉個例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_two_argument</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;相加兩個字串&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br></pre></td></tr></table></figure>\n\n<p>這種情況下就可以從根本做起，把Typing Hint打好，然後就可以不需要寫註解<br>真的忘記我滑鼠滑上去function上也可以知道要帶什麼參數進去</p>\n<p>真的要寫註解的情況之後有說到Clean code這本書時再來做說明</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://en.wikipedia.org/wiki/Programming_style\">Coding Style</a><br>Clean Code(ch.1)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Code","Coding Style","Python"]},{"title":"【Day-4】Clean Code(中)","url":"/2023/09/04/IronDay4/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10314866\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>昨天介紹了一些比較有關程式碼部分<br>都是跟Code比較有關的</p>\n<p>今天會來介紹比較是設計面的問題<br>也就是Clean Code的<strong>羽化</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"羽化\"><a href=\"#羽化\" class=\"headerlink\" title=\"羽化\"></a>羽化</h1><p>開頭我們先引用書中的說法</p>\n<blockquote>\n<p>根據Kent的說法，若遵循下列守則，一個設計就可以說是「簡單的」</p>\n<ul>\n<li>執行完所有測試</li>\n<li>沒有重複的部分</li>\n<li>表達程式設計師的本意</li>\n<li>最小化類別和方法的數量</li>\n</ul>\n<p>這些守則，根據重要性來排序<br>-Clean Code P.190</p>\n</blockquote>\n<h2 id=\"簡單設計守則-1-執行完所有測試\"><a href=\"#簡單設計守則-1-執行完所有測試\" class=\"headerlink\" title=\"簡單設計守則 1 : 執行完所有測試\"></a>簡單設計守則 1 : 執行完所有測試</h2><p>當我們的系統設計得再好，如果沒有辦法驗證系統是否能夠如預期般運作，那一切都是紙上談兵。</p>\n<p>所以必須全面的執行測試，並且能夠在<strong>所有的時間</strong>通過<strong>所有的測試</strong><br>這段話看似簡單，但如果我們沒有辦法測試，那又如何證明這些能夠運作</p>\n<p>緊密耦合的程式碼，只會造成測試撰寫的困難。<br>當我們在撰寫測試時，我們就會用越多<strong>依賴反轉的原則(DIP)<strong>也會用更多</strong>相依注入(Dependency injection)<strong>、</strong>介面(interface)<strong>、</strong>抽象概念</strong>之類的工具，來降低耦合度</p>\n<p>舉個例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\">user_name: <span class=\"built_in\">str</span>, user_password: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(user_name) &lt; <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(user_password) &lt; <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    user_group = some_user_model.get_all_user()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> user_group:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user.user_name == user_name:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> false</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p>這個案例我們可以看到，這些已經都把所有建立使用者的邏輯放在<code>create_user</code>這個function上<br>這會有幾個問題</p>\n<ul>\n<li>無法<strong>獨立測試</strong>驗證、確認使用者是否存在的邏輯是否正確，這會導致debug時間太長</li>\n<li>當我的驗證邏輯改變的時候，我就要在我的主流程變更程式碼，這會導致如果有複數個相通邏輯的地方都要一併變更</li>\n</ul>\n<p>這個function的耦合度就太高了，所以我們可以把它拆解為各種不同的function以符合單一職責原則(SRP)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\">user_name: <span class=\"built_in\">str</span>, user_password: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    is_verification_successful = some_validate_model.is_validate_user_data_successful(user_name, user_password)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_verification_successful:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> false</span><br><span class=\"line\">    </span><br><span class=\"line\">    has_user = some_user_model.get_user(user_name, user_password)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> has_user:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"簡單設計守則-2-4-程式重構\"><a href=\"#簡單設計守則-2-4-程式重構\" class=\"headerlink\" title=\"簡單設計守則 2~4 : 程式重構\"></a>簡單設計守則 2~4 : 程式重構</h2><p>也就是對應最後三點</p>\n<ul>\n<li>沒有重複的部分</li>\n<li>表達程式設計師的本意</li>\n<li>最小化類別和方法的數量</li>\n</ul>\n<h3 id=\"沒有重複的部分\"><a href=\"#沒有重複的部分\" class=\"headerlink\" title=\"沒有重複的部分\"></a>沒有重複的部分</h3><p>延續上面寫的，如果我們今天不只有使用者(user)需要建立，我們也需要建立管理員(admin)<br>如果說他們都使用同一個驗證邏輯<br>那我們就更不該把驗證邏輯寫在create的function底下<br>更應該拆成一個獨立的function提供測試以及使用</p>\n<h3 id=\"表達程式設計師的本意\"><a href=\"#表達程式設計師的本意\" class=\"headerlink\" title=\"表達程式設計師的本意\"></a>表達程式設計師的本意</h3><p>很多方法都可以達到這點，像是良好的命名習慣、讓function以及class簡短、寫單元測試等等<br>這些都可以達到<br>但是最重要最重要的事情就是<strong>嘗試</strong><br>有可能下一個看code的就是我們自己，總不能看不懂我們自己寫的東西吧<br>所以就更不能只能讓程式停留在只要能跑就好的階段<br>而是<strong>大家都要看的懂</strong></p>\n<blockquote>\n<p><em><strong>Explicit is better than implicit.</strong></em><br><em><strong>Simple is better than complex.</strong></em><br><em><strong>Complex is better than complicated.</strong></em><br>-The Zen Of Python</p>\n</blockquote>\n<h3 id=\"最小化類別和方法的數量\"><a href=\"#最小化類別和方法的數量\" class=\"headerlink\" title=\"最小化類別和方法的數量\"></a>最小化類別和方法的數量</h3><p>這應該是我覺得最困難達到的，這個很容易在過度設計跟保有彈性之間取得平衡<br>幸好這條守則比起其他的手則相對不重要，應該優先遵守其他的守則。</p>\n<p>這條守則我認為和第一條有些相關，當我們沒有什麼重複的部分，自然類別和方法也會減少一些。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>我原本還想講平行化的，但我發現我已經寫太多了，再寫下去就太滿了<br>平行化就交給你們去看吧<br>我們明天見</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Code(ch.12)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Code"]},{"title":"【Day-5】Clean Code(下)","url":"/2023/09/05/IronDay5/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10314942\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>終於到最後一個Clean Code的文章….大概吧<br>只能說這本書真的太多<br>完全沒辦法幾天之內介紹完<br>真的介紹完我也要壓縮一大堆<br>所以就直接帶到最後我預定介紹的主題 - <strong>程式碼的氣味與啟發</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"註解-Comments\"><a href=\"#註解-Comments\" class=\"headerlink\" title=\"註解(Comments)\"></a>註解(Comments)</h1><p>對我們又要來講註解了，對於Clean Code來說，程式碼就是最好的註解<br>所以他才會提到那麼多次</p>\n<p>我們講個我們之前沒說過的 - <strong>被註解掉的程式碼</strong></p>\n<p>現代有非常多工具可以儲存我們的程式碼的歷史紀錄，一定都有用過的就是<strong>Git</strong><br>當上面有過多的被註解掉的程式碼，到最後就不太會有人知道這些事幹嘛的<br>你說寫註解說這是幹嘛的，不就好了<br>但，不是每個人的開發習慣都一樣，有些變數或函式是會依賴其他部分的，而且更不用說可能還呼叫到已經被刪除掉的部分。</p>\n<p>所以，當你想要把程式碼註解掉的時候，請記得，你還有<strong>Git</strong><br><img src=\"https://i.imgur.com/XTMnSwG.png\" alt=\"Image\"></p>\n<h1 id=\"開發環境-Environment\"><a href=\"#開發環境-Environment\" class=\"headerlink\" title=\"開發環境(Environment)\"></a>開發環境(Environment)</h1><p>相信一定很多人有遇過那種，要一大堆步驟才可以建立整個專案的狀況<br>這其實完全不應該發生<br>最好的狀況就是，只用一個指令就可以取出整個程式系統，再用一個指令就能建立好專案</p>\n<p>這個容我分享一個鬼故事<br>曾經我遇過某位仁兄<br>他老兄給我把PHP檔案的開頭用簡寫，讓我們找了兩天才發現這件事<br>他才說要把php的設定改成可以用short_tag</p>\n<p>拜託各位不要當這種人…</p>\n<p>扯遠了</p>\n<p>現在我們有<strong>Docker</strong>可以Run起整個專案，簡單的一個<code>docker-compose up</code>即可架起整個專案<br><img src=\"https://i.imgur.com/oEbO8AQ.png\" alt=\"Docker\"></p>\n<h1 id=\"同分原始檔存在多種語言\"><a href=\"#同分原始檔存在多種語言\" class=\"headerlink\" title=\"同分原始檔存在多種語言\"></a>同分原始檔存在多種語言</h1><p>現在軟體開發是很有機會做到這件事的，像是php、html等等<br>不過這種做法只會讓人覺得困惑<br>對於日後接手這個專案的人來說，他根本不懂這些邏輯</p>\n<p>所以最理想的狀態就是指使用一種語言，如果真的要使用別種語言，請將其他種語言的範圍降至最低。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>Clean Code終於介紹告一個段落<br>緊接著要講SOLID原則</p>\n<p>我們明天見吧</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Code(程式碼的氣味與啟發)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Code"]},{"title":"【Day-7】SOLID - 開放封閉原則(OCP)","url":"/2023/09/07/IronDay7/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10315745\">it邦</a></p>\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>今天來說說<strong>開放封閉原則(OCP, Open-Close Principle)</strong></p>\n<blockquote>\n<p>一個軟體的製品應該對於擴展是開放的，但對於修改是封閉的<br>-Clean Architecture(P.59)</p>\n</blockquote>\n<p>我們多少都遇過某些老專案會有加一個新功能就要改很多地方或是很難改的狀況<br>那麼參與設計這個軟體的架構的工程師，就是參與了一次極大的失敗。</p>\n<p>OCP其實也是直接指導我們類別和模組化的原則。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"實務\"><a href=\"#實務\" class=\"headerlink\" title=\"實務\"></a>實務</h1><p>其實說起來他會有點像是單一職責的延伸<br>舉個我們以前會很常看到的架構 - 伺服器端渲染(SSR, server side render)<br>這就是非常典型高耦合的架構設計<br>當然我不是指所有的SSR都不好，但相較於CSR的耦合度就差非常多</p>\n<p>在這個架構中我們會很常看到將前後端的Code混再一起<br>以PHP為例，滿常看到將PHP和HTML甚至CSS, JavaScript寫在一起的狀況<br>那當要修改一個小地方的時候我就必須連同前端後端的邏輯一並修正<br>這就會導致我們說的大量修改的狀況</p>\n<p>那即便我們使用了其他方式<br>也必須確保這些元件的依賴是單向的</p>\n<p><img src=\"https://i.imgur.com/PEUN670.png\" alt=\"依賴關係\"></p>\n<p>這樣是為了確保<strong>下層的改動的改動不會影響到上層的邏輯</strong></p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Architecture(ch.8)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Architecture","SOLID","OCP"]},{"title":"【Day-9】介面隔離原則(ISP)","url":"/2023/09/09/IronDay9/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10316006\">it邦</a></p>\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>今天要介紹的是介面隔離原則(ISP, Interface Segregation Principle)</p>\n<p>ISP的原則就是，不該強迫使用者使用不需要使用的介面。</p>\n<p>先說他與程式語言的關係<br>靜態型別在一開始宣告實即確定型別，像是Java必須要使用import, use, include，建立原始碼的依賴關係<br>而像是Python這種動態語言就不存在這種宣告，所以我可以在我需要的時候才會實做這些方法</p>\n<p>你可能會想，沒差啊，我就寫完擺在那邊<br>但換個角度想，今天有可能會因為某些原因而導致，其他預料之外的問題導致需要解決，那為什麼不一開始就處理乾淨，把不需要的介面拿掉</p>\n<span id=\"more\"></span>\n\n<h1 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h1><p>這次我用PHP實作</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Pet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cleanLitterBox</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Pet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;喵喵\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diggingLitterBox</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;不要亂看，我在上廁所!\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用範例</span></span><br><span class=\"line\"><span class=\"variable\">$cat</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\"><span class=\"variable\">$cat</span>-&gt;<span class=\"title function_ invoke__\">speak</span>();</span><br><span class=\"line\"><span class=\"variable\">$cat</span>-&gt;<span class=\"title function_ invoke__\">cleanLitterBox</span>();</span><br></pre></td></tr></table></figure>\n<p>我們先定義一個寵物的介面，假設我家的寵物有狗和貓，貓會埋貓砂，但狗(一般狀況下)不會埋貓砂<br>這對於我們來說，把介面實坐在裡面，可能會在未來有不可預期的問題<br>所以建議將<code>Pet</code>這個介面改成</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Pet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或是乾脆一點貓和狗的介面直接分開</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>這章節真的滿短的，沒什麼好講的<br>明天就到SOLID的最後一個原則了</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Architecture(ch.10)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Architecture","SOLID","ISP"]},{"title":"【Day-8】SOLID - 里式替換原則(LSP)","url":"/2023/09/08/IronDay8/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10313739\">it邦</a></p>\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>這次介紹的是里式替換原則（LSP, Liskov Substitution Principle）<br>里式替換原則的核心思想是：如果類別B是類別A的子類別，那麼在不影響程式的正確性的前提下，可以將類別A的對象替換成類別B的對象。</p>\n<p>換句話說，子類別應該能夠替換父類別而不會破壞程式的預期行為。</p>\n<p>(謎之音:半夜上文章好累…</p>\n<span id=\"more\"></span>\n\n<h1 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h1><p>假設我今天我定義一個形狀 - 長方形<br>那我的遵守LSP的程式碼會長這樣</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculateArea</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span>(<span class=\"title class_ inherited__\">Shape</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, width, height</span>):</span><br><span class=\"line\">        self.width = width</span><br><span class=\"line\">        self.height = height</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculateArea</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.width * self.height</span><br></pre></td></tr></table></figure>\n<p>這個情況下長方形是一種形狀，那我一定有面積<br>我可以安全的替換掉父類別而不影響其他的實作</p>\n<p>但如果今天變成這樣</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculateArea</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Square</span>(<span class=\"title class_ inherited__\">Rectangle</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, width, height</span>):</span><br><span class=\"line\">        self.width = width</span><br><span class=\"line\">        self.height = height</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculateArea</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.width * self.height</span><br></pre></td></tr></table></figure>\n<p>這樣就會容易讓人混淆正方形的長寬一定相同，但長方形不是，這樣就不符合里式替換原則<br>再舉一個經典的例子</p>\n<p>所有鳥類都會飛嗎?<br>不，企鵝不會<br><del>所有的狗狗都很聰明嗎?<br>不，吉娃娃不是。</del><br>所以當我們實作一個鳥類的介面出來，給企鵝用，企鵝只會跟妳哭說我不會飛(預期之外的錯誤)</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Architecture(ch.9)<br><a href=\"https://igouist.github.io/post/2020/11/oo-12-liskov-substitution-principle/\">菜雞與物件導向 (12): 里氏替換原則</a></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Architecture","SOLID","LSP"]},{"title":"Python sqlalchemy note — 1","url":"/2022/09/05/PythonSqlalchemy1/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>第一次嘗試寫blog，怕不寫下來兩個星期以後都忘記了，現在還很菜，鞭小力一點。</p>\n<p>這次的主題是python上熱門的ORM工具 — <strong>sqlalchemy</strong>。</p>\n<p>起初在寫一個有關於成績分析的sideproject，因為使用到資料庫做為儲存資料的方式，所以免不了的需要對資料庫的表格進行一些操作，原本的想法是使用 python 的 module 去做，但寫到一半發現，要是一個一個用 SQL 的語法寫下去，後面維護起來肯定是直接送急診。</p>\n<p>於是乎就開始思考，有沒有什麼方式可以解決我的困擾。<br>剛好工作的關係，接觸到了一種可以方便使用者對資料庫執行操作的方式 — <strong>ORM</strong>。</p>\n<span id=\"more\"></span>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"ORM-是什麼\"><a href=\"#ORM-是什麼\" class=\"headerlink\" title=\"ORM 是什麼\"></a>ORM 是什麼</h1><p>ORM(Object Relational Mapping)是一種程式設計技術，用於實現物件導向程式語言裡不同類型系統的資料之間的轉換。</p>\n<blockquote>\n<p><strong>用最白話的方式來說，就是一個中繼站的概念，幫我們去和資料庫做溝通，我們可以用ORM的語法來撰寫程式就好。</strong></p>\n</blockquote>\n<p>什麼意思呢? 舉例：假設我們今天有一個 Table 叫做 Student</p>\n<p><img src=\"/2022/09/05/PythonSqlalchemy1/demotable.png\"></p>\n<p>如果今天我們要查詢所有一年級的學生，在SQL的語法裡面我們會這樣寫</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> &quot;Student&quot; <span class=\"keyword\">WHERE</span> &quot;grade&quot; <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣看起來好像還好</p>\n<p>但如果我們今天表格之間的關係開始複雜起來呢</p>\n<p>你可能中間需要先去查詢別的表格的 id，再拿回來當作條件，同時又需要一起輸出出來，甚至還要根據使用者的條件來做篩選。可能就有機會長成這樣:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> (&quot;table.ele1&quot;, &quot;table.ele2&quot;, &quot;number&quot;, &quot;name&quot;)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &quot;student&quot;</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">JOIN</span> &quot;table&quot;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> &quot;table&quot;.&quot;id&quot; <span class=\"operator\">=</span> &quot;student&quot;.id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"keyword\">condition</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> anthor <span class=\"keyword\">condition</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> anthor <span class=\"keyword\">condition</span> again</span><br></pre></td></tr></table></figure>\n\n<p>這樣看起來就麻煩了不少，不幸的是這個狀況在這個專案一定會出現而且頻率非常高。</p>\n<p>這時就可以讓我們的ORM派上用場，省下我們寶貴的時間。</p>\n<blockquote>\n<p>最大的優點就是直接用ORM的語法來代替上面那一串又臭又長的SQL語法，另外還可以提升安全性。</p>\n</blockquote>\n<p>雖然我不是時間管理大師，但這聽起來很棒對吧?</p>\n<p>你說這個東西厲害到成仙了，難道他沒有缺點嗎。<br>當然有，方便換來的就是效能上的犧牲。我們沒辦法一個一個用SQL的語法來最佳化查詢的效能。</p>\n<p>但我認為在這個效能飛起的時代，這是可以接受的。</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"實際應用\"><a href=\"#實際應用\" class=\"headerlink\" title=\"實際應用\"></a>實際應用</h1><p>首先我們要先建立與資料庫的連線(以下以 postgresql 為例)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlalchemy</span><br><span class=\"line\"></span><br><span class=\"line\">engine = sqlalchemy.create_engine(</span><br><span class=\"line\">    <span class=\"string\">&#x27;postgresql://username:password@your_ip:yourportyour_database_name&#x27;</span>, echo=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 結構: 資料庫名稱://使用者名稱:密碼@資料庫ip:資料庫port/資料庫名稱</span></span><br></pre></td></tr></table></figure>\n<p>這樣就可以建立好一個連線了</p>\n<p>如果是其他資料庫的話，可以參考<a href=\"https://docs.sqlalchemy.org/en/14/core/engines.html\">官方文件</a></p>\n<p>建立好連線之後我們要來定義一個新的Table</p>\n<ul>\n<li>這個 Table 叫做 students</li>\n<li>Primary Key 是 id 且會自動生成數字</li>\n<li>grade, class, number 是唯一組合的</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, Boolean  <span class=\"comment\"># 型別</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base </span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> UniqueConstraint  <span class=\"comment\"># 唯一組合</span></span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;students&#x27;</span>  <span class=\"comment\"># 表格名稱</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(<span class=\"string\">&#x27;id&#x27;</span>, Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = Column(<span class=\"string\">&#x27;name&#x27;</span>, String(<span class=\"number\">20</span>), nullable=<span class=\"literal\">False</span>)  <span class=\"comment\"># 20為最大長度</span></span><br><span class=\"line\">    grade = Column(<span class=\"string\">&#x27;grade&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    class_  = Column(<span class=\"string\">&#x27;class&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    number = Column(<span class=\"string\">&#x27;number&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    UniqueConstraint(grade, class_, number, name=<span class=\"string\">&#x27;basic_info&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, number, grade, class_</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.number = number</span><br><span class=\"line\">        self.grade = grade</span><br><span class=\"line\">        self.class_ = class_</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回傳要顯示的資料</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;student(&#x27;%s&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;)&gt;&quot;</span>%(</span><br><span class=\"line\">            self.name, self.grade, self.class_, self.number)</span><br><span class=\"line\"></span><br><span class=\"line\">Base.metadata.create_all(engine)  <span class=\"comment\"># 建立所有表格</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣我們就建立好一個 Table 了</p>\n<p>再來我們要新增一筆資料進去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"></span><br><span class=\"line\">value = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;大偉&quot;</span>, <span class=\"string\">&quot;grade&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;class_&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;number&quot;</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\">session = Session()</span><br><span class=\"line\">session.add(Students(**values))</span><br><span class=\"line\"><span class=\"comment\"># 也可以使用 session.add(Student(&quot;大偉&quot;, 1, 1, 1))</span></span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 記得儲存</span></span><br></pre></td></tr></table></figure>\n\n<p>你說我們有沒有快一點的方式</p>\n<p>當然有的，我們可以改用 add_all 這個方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student_value = [Student(<span class=\"string\">&quot;阿明&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>), Student(<span class=\"string\">&quot;小瑪莉&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)]</span><br><span class=\"line\">session.add_all(student_value)</span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 記得儲存</span></span><br></pre></td></tr></table></figure>\n\n<p>最後我們來查詢資料</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = session.query(Student)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<p>以下是完整的程式碼</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlalchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> select</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, Boolean  <span class=\"comment\"># 型別</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> UniqueConstraint</span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Students</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;students&#x27;</span>  <span class=\"comment\"># 表格名稱</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(<span class=\"string\">&#x27;id&#x27;</span>, Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = Column(<span class=\"string\">&#x27;name&#x27;</span>, String(<span class=\"number\">20</span>), nullable=<span class=\"literal\">False</span>)  <span class=\"comment\"># 20為最大長度</span></span><br><span class=\"line\">    grade = Column(<span class=\"string\">&#x27;grade&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    class_  = Column(<span class=\"string\">&#x27;class&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    number = Column(<span class=\"string\">&#x27;number&#x27;</span>, Integer, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    UniqueConstraint(grade, class_, number, name=<span class=\"string\">&#x27;basic_info&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, number, grade, class_</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.number = number</span><br><span class=\"line\">        self.grade = grade</span><br><span class=\"line\">        self.class_ = class_</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        回傳要顯示的資料</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;student(&#x27;%s&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;, &#x27;%d&#x27;)&gt;&quot;</span>%(</span><br><span class=\"line\">            self.name, self.grade, self.class_, self.number)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    engine = sqlalchemy.create_engine(yoursql_info)  <span class=\"comment\"># 排版問題請往上看</span></span><br><span class=\"line\">    Session = sessionmaker(bind=engine)</span><br><span class=\"line\">    session = Session()</span><br><span class=\"line\">    Base.metadata.create_all(engine)  <span class=\"comment\"># 建立 Table</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    value = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;大偉&quot;</span>, <span class=\"string\">&quot;grade&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;class_&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;number&quot;</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    session.add(Student(**values))  <span class=\"comment\"># 新增資料進去 Table </span></span><br><span class=\"line\">    student_value = [Student(<span class=\"string\">&quot;阿明&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>), Student(<span class=\"string\">&quot;小瑪莉&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)]</span><br><span class=\"line\">    session.add_all(student_value)  <span class=\"comment\"># 一次新增多筆</span></span><br><span class=\"line\">    <span class=\"comment\"># 取得 &quot;所有&quot; 資料</span></span><br><span class=\"line\">    data = session.query(Student)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    session.commit()  <span class=\"comment\"># 儲存資料</span></span><br><span class=\"line\">    session.close()  <span class=\"comment\"># 關閉 </span></span><br></pre></td></tr></table></figure>\n\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://zh.wikipedia.org/zh-tw%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84\">Wiki</a><br><a href=\"https://docs.sqlalchemy.org/en/14/\">官方文件</a></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>以上就是簡單的 sqlalchemy 介紹，如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>\n","categories":["Python","ORM"],"tags":["Note","Python","Sqlalchemy"]},{"title":"Python sqlalchemy note — 2","url":"/2022/09/05/PythonSqlalchemy2/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>這次要來繼續說明 <strong>sqlalchemy</strong> 的更多操作，如果沒有看過<a href=\"https://kenhuangtw.github.io/2022/09/05/PythonSqlalchemy1/#more\">第一篇</a>的朋友們，可以先去看<a href=\"https://kenhuangtw.github.io/2022/09/05/PythonSqlalchemy1/#more\">第一篇</a></p>\n<span id=\"more\"></span>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>篩選資料注意事項<br>在 sqlalchemy 使用 filter 篩選資料的時候<br>單純只使用 <code>filter()</code> 只會回傳 SQL 的語法回來</p>\n<p>必需要在後面再加上其他方法，例如: <code>all()</code>或是 <code>one()</code> 來獲取我們要的資料</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">class_query = session.query(Student).<span class=\"built_in\">filter</span>(class_ == <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 上述的方式會回傳的是一個 orm.query.Query的物件，印出來是 SQL 的語法</span></span><br><span class=\"line\">all_query = session.query(Student).<span class=\"built_in\">filter</span>(Student.class_ == <span class=\"number\">1</span>).<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"comment\"># 這個方式會回傳一個 list, 裡面包含所有的結果</span></span><br><span class=\"line\">one_query = session.query(Student).<span class=\"built_in\">filter</span>(Student.class_ == <span class=\"number\">1</span>).one()</span><br><span class=\"line\"><span class=\"comment\"># 回傳一個 query 裡面的 Table 的物件</span></span><br></pre></td></tr></table></figure>\n\n<p>然而在使用 <code>one()</code> 需要特別注意一件事情</p>\n<blockquote>\n<p>只要符合條件的資料超過一筆就會引發一個 sqlalchemy.exc.MultipleResultsFound 的錯誤，在使用時一定要特別注意</p>\n</blockquote>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"多個條件篩選\"><a href=\"#多個條件篩選\" class=\"headerlink\" title=\"多個條件篩選\"></a>多個條件篩選</h1><p>只要條件越多，使用 ORM 絕對會比使用 SQL 的語法方便不少，更不用說我們還是在 python 上寫這些，要是要一個一個用 SQL 語法也不是不行，就把語法當作字串就好，再變成格式化字串填入我們要填的條件，不過這樣就會非常麻煩、難以維護而且看起來很醜。</p>\n<p>扯遠了，假設我們今天要篩選 一班 和 二班 的學生，總不可能我們去下兩次 filter 吧，這樣只要條件一多，肯定是打 filter 打到晚上睡覺都會夢到。</p>\n<blockquote>\n<p>為了因應這個情況，sqlalchemy 提供了 model 一個方法，就是 .in_()。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = session.query(Student).<span class=\"built_in\">filter</span>(Student.class_.in_([<span class=\"number\">1</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"comment\"># 這樣就會去尋找 Student 裡面所有 1班、2班的學生</span></span><br></pre></td></tr></table></figure>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>這個情況還算非常簡單的，我們再更複雜一點，我們不只要所有 1班 和 2班的學生，座號小於5號的，我們全部都要。</p>\n<p>這時候我們可以這麼做</p>\n<blockquote>\n<p>先使用一個容器儲存全部的條件，再一次解開</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">condition = [Student.class_.in_([<span class=\"number\">1</span>, <span class=\"number\">2</span>]), Student.number &lt; <span class=\"number\">5</span>]</span><br><span class=\"line\">data = session.query(Student).<span class=\"built_in\">filter</span>(*condition).<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"comment\"># 回傳一個list，裡面包含 1.2班 &quot;且&quot; 座號小於五號的</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不是用 and 的情況，要改用 or 呢?<br>那這時我們可以從 sqlalchemy 裡面導入 <code>or_</code> 來幫助我們實現這些條件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> or_</span><br><span class=\"line\"></span><br><span class=\"line\">condition = [Student.class_.in_([<span class=\"number\">1</span>, <span class=\"number\">2</span>]), Student.number &lt; <span class=\"number\">5</span>]</span><br><span class=\"line\">data = session.query(Student).<span class=\"built_in\">filter</span>(or_(*condition)).<span class=\"built_in\">all</span>()</span><br></pre></td></tr></table></figure>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"更新資料\"><a href=\"#更新資料\" class=\"headerlink\" title=\"更新資料\"></a>更新資料</h1><p>我們可以用幾種方式更新資料，這邊簡單介紹兩種</p>\n<p>第一種: 一個一個慢慢來</p>\n<p>這種情況比較適合少量更新，例如：小瑪莉改名字了，改成Amy</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = session.query(Student).<span class=\"built_in\">filter</span>(<span class=\"string\">&quot;name&quot;</span>).one()  <span class=\"comment\"># 直接回傳物件studnet.name = &quot;Amy&quot;</span></span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 儲存資料</span></span><br><span class=\"line\">session.close()  <span class=\"comment\"># 關閉</span></span><br></pre></td></tr></table></figure>\n\n<p>第二種情況: 一次更新所有符合條件的資料</p>\n<p>這種情況就很適合大量的更新，例如：全班都改名成杰哥</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = session.query(Student).<span class=\"built_in\">filter</span>().update(&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;杰哥&quot;</span>&#125;)</span><br><span class=\"line\">session.commit()  <span class=\"comment\"># 儲存資料</span></span><br><span class=\"line\">session.close()  <span class=\"comment\"># 關閉</span></span><br></pre></td></tr></table></figure>\n<p>這樣種方式在需要大量更新的情況下非常好用，只要把<code>filter()</code>的條件設定好，後面接一個update()的方法最後儲存資料就好</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"刪除資料\"><a href=\"#刪除資料\" class=\"headerlink\" title=\"刪除資料\"></a>刪除資料</h1><p>和<code>.update()</code>相似，可以在Query這個物件後面加上<code>.delete()</code>這個方法</p>\n<p>例如: 刪除所有叫做杰哥的學生</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">session.query(Student).<span class=\"built_in\">filter</span>(Student.name == <span class=\"string\">&quot;杰哥&quot;</span>).delete()</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\">session.close()</span><br></pre></td></tr></table></figure>\n<p>如果不使用Query這個物件來做刪除有沒有辦法呢?</p>\n<p>當然有的，我們可以用session的<code>.delete()</code>方法，在<code>.delete()</code>裡面放入我們要刪除的 model物件 就可以了</p>\n<p>例如: 刪除 2年級的學生</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = session.query(Student).<span class=\"built_in\">filter</span>(Student.grade == <span class=\"number\">2</span>)</span><br><span class=\"line\">session.delete(student)</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\">session.colse()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://docs.sqlalchemy.org/en/14/\">官方文件</a></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>以上就是簡單的 sqlalchemy 介紹，如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["Python","ORM"],"tags":["Note","Python","Sqlalchemy"]},{"title":"Race Condition","url":"/2023/07/30/RaceCondition/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>同步競爭(Race Condition)是指說某個資料因為多個行程而導致最終資料不正確的狀況</p>\n<p>這其實滿淺顯易懂的，但懂歸懂有時候還是會忽略到一些狀況。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>我們先來看下面的程式碼</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo</span><span class=\"params\">(a *<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*a = *a + <span class=\"number\">3</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;a = &quot;</span>, *a)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> *a%<span class=\"number\">3</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Hello foo&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">boo</span><span class=\"params\">(b *<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t*b = *b + <span class=\"number\">5</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;b = &quot;</span>, *b)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> *b%<span class=\"number\">3</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Hello boo&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tfoo(&amp;a)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tboo(&amp;a)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">1</span> * time.Second) <span class=\"comment\">// 讓主執行緒休眠1秒</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在這段 Code 中，我期待每次用 <code>foo()</code> 和 <code>boo()</code> 都會跑裡面的條件式</p>\n<p>但實際上發生什麼事我們來看看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">b =  8</span><br><span class=\"line\">b =  13</span><br><span class=\"line\">b =  18</span><br><span class=\"line\">Hello boo</span><br><span class=\"line\">a =  3</span><br><span class=\"line\">Hello foo</span><br><span class=\"line\">a =  21</span><br><span class=\"line\">Hello foo</span><br><span class=\"line\">a =  24</span><br><span class=\"line\">Hello foo</span><br></pre></td></tr></table></figure>\n\n<p>發現了嗎，不只是條件式沒有跑出來，連同 b 和 a 的順序不同，這到底是為什麼</p>\n<h1 id=\"為什麼會發生\"><a href=\"#為什麼會發生\" class=\"headerlink\" title=\"為什麼會發生\"></a>為什麼會發生</h1><p>因為在這段 Code 中，我們會看到 <code>foo()</code> 和 <code>boo()</code> 會是併發的狀況，變成是<strong>這兩者不再是照順序執行的且 function 中傳遞的還是指標，所以在這個情況下，就會同時修改同一個記憶體位址的值</strong></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["程式開發","Golang"],"tags":["Golang"]},{"title":"MVC與MTV框架的重構","url":"/2023/07/29/RefactorMVC/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>當我們在寫Laravel, Django 等MVC以及MTV的架構時，部分的人可能都會習慣把所有的邏輯，包含Use Case, 資料驗證 等等全部寫在同一包裡面</p>\n<p>一開始或許開發的時候比較方便，你自己在自幹的時候想怎麼寫都沒差</p>\n<p>但換個角度，當今天這個專案是10個人一起做的呢？甚至是過了10個月你再回來看，我們要花多少時間來看這些架構</p>\n<p>再來，當我們今天要新增一個功能或是更改 Use Case 時，我們又要花多少時間來做閱讀？</p>\n<p>其實在看過Clean Code, Clean Coder 和 Clean Architecture之後其實就會知道，傳統的MVC框架真的滿髒亂而且不容易維護的</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一般MVC架構\"><a href=\"#一般MVC架構\" class=\"headerlink\" title=\"一般MVC架構\"></a>一般MVC架構</h1><p>看個範例，以註冊會員為例子好了，假設我們帶入<code>member_name</code>, <code>member_email</code>, <code>member_password</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemberController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">store</span>(<span class=\"params\">Request <span class=\"variable\">$request</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 驗證請求參數</span></span><br><span class=\"line\">        <span class=\"variable\">$validatedData</span> = <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">validate</span>([</span><br><span class=\"line\">            <span class=\"string\">&#x27;member_name&#x27;</span> =&gt; <span class=\"string\">&#x27;required|string|min:1|max:60&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;member_email&#x27;</span> =&gt; <span class=\"string\">&#x27;required|string|email|max:255|unique:members&#x27;</span>, // 確保email在資料庫中唯一</span><br><span class=\"line\">            <span class=\"string\">&#x27;member_password&#x27;</span> =&gt; <span class=\"string\">&#x27;required|string|max:255&#x27;</span>,</span><br><span class=\"line\">        ]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在資料庫中建立會員資料</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$member</span> = <span class=\"title class_\">Member</span>::<span class=\"title function_ invoke__\">create</span>([</span><br><span class=\"line\">                <span class=\"string\">&#x27;member_name&#x27;</span> =&gt; <span class=\"variable\">$validatedData</span>[<span class=\"string\">&#x27;member_name&#x27;</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;member_email&#x27;</span> =&gt; <span class=\"variable\">$validatedData</span>[<span class=\"string\">&#x27;member_email&#x27;</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;member_password&#x27;</span> =&gt; <span class=\"variable\">$validatedData</span>[<span class=\"string\">&#x27;member_password&#x27;</span>],</span><br><span class=\"line\">            ]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 成功建立資料，回傳201 Created狀態碼</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>([<span class=\"string\">&#x27;message&#x27;</span> =&gt; <span class=\"string\">&#x27;會員資料建立成功&#x27;</span>], <span class=\"number\">201</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 發生錯誤，回傳錯誤訊息</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>([<span class=\"string\">&#x27;message&#x27;</span> =&gt; <span class=\"string\">&#x27;會員資料建立失敗&#x27;</span>], <span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>光是簡單的驗證和建立資料庫就已經有點長度了，如果我今天還要再加入更多功能進來，例如要付費才能建立會員，所以要使用金流，或是什麼註冊會員送好禮，所以又要使用物流等等的功能。</p>\n<p>一開始可能還好，但不要忘了，<strong>隨著軟體生命週期的增長，維護的成本是會越來越高的</strong>。更不用說多數的人希望有新的功能加進自己的軟體裡面。</p>\n<p>到時候一個新進來的人要花上多少時間來熟悉這些Code，且維護又要花上多少時間?</p>\n<p>這個架構甚至連單元測試都測不了，出問題要從哪邊找起搞不好都是一個問題。</p>\n<p>更不用說還有一堆公司會為了追求快速開發而把前後端的Code寫在同一包檔案裡面，到時候要加一個新功能都有很有可能要花很大的時間去修改和Study</p>\n<p><img src=\"/2023/07/29/RefactorMVC/%E5%9E%83%E5%9C%BE.png\"></p>\n<p><strong>甚至這不是你寫的Code，還要花多少時間來讀懂作者的邏輯</strong>?</p>\n<h1 id=\"軟體的維護\"><a href=\"#軟體的維護\" class=\"headerlink\" title=\"軟體的維護\"></a>軟體的維護</h1><p>隨著時間時間增長，可能會有新增加的功能，或是配合市場要調整的部分，此時架構或是Code如果不夠乾淨，那維護的時間將是隨著指數增長</p>\n<p>我們引用Clean Code這本書中的資料<br>80年代某不願具名軟體公司的內部統計資料:</p>\n<table>\n<thead>\n<tr>\n<th>工程人員的增長</th>\n<th>同一時期的生產力</th>\n<th>每行程式碼的平均成本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"/2023/07/29/RefactorMVC/employee.png\"></td>\n<td><img src=\"/2023/07/29/RefactorMVC/productivity.png\"></td>\n<td><img src=\"/2023/07/29/RefactorMVC/average.png\"></td>\n</tr>\n</tbody></table>\n<p>我們可以發現幾件事情</p>\n<ul>\n<li>工程人員持續且倍數的增長</li>\n<li>每行程式碼的平均成本也是持續且倍數的增長</li>\n<li>但生產力自從第三年之後就沒有增長多少，後續甚至是幾乎持平的</li>\n</ul>\n<blockquote>\n<p>「當對程式碼的整潔程度或設計的結構沒有多少想法時，那你就會跟這條曲線一樣走到最終悲慘的結局」<br>取自: Clean Architecture (p.6)</p>\n</blockquote>\n<p>再舉一個極端的例子</p>\n<blockquote>\n<p>「我知道有一間公司在 80 年代後期開發了一個殺手級應用，但後來發行的週期開始拖長，程式裡的錯誤也無法在下次發行之前修復，程式載入的時間與崩潰機率也愈來愈長和高。不久，這家公司就倒閉了。我問他當時發生了什麼…」<br>「急於將產品上市，導致他們的程式碼變得一團糟，當他們加入愈來愈多的產品特點時，程式碼就變得愈來愈糟糕，一直到他們再也無法管理這團混亂。劣質的程式碼導致了這家公司的倒閉」<br>取自: Clean Code (p.3)</p>\n</blockquote>\n<p>如果你問我說，「我的主管要求我一定要在三天內產出這個專案，那我該怎麼辦?」<br>我建議你先去看一下<strong>Clean Coder</strong>，上面有很多身為一個專業人士該做的事情和應對方式。<br>如果主管還是不合理的要求你，那我只好搬出那句話，<strong>程式跟人只要有一個能跑就好</strong>。</p>\n<blockquote>\n<p>隨時準備好可以跳槽的準備。</p>\n</blockquote>\n<h1 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h1><h2 id=\"傳統-MVC-和-MTV\"><a href=\"#傳統-MVC-和-MTV\" class=\"headerlink\" title=\"傳統 MVC 和 MTV\"></a>傳統 MVC 和 MTV</h2><p>我們先來看看傳統 MVC 或是 MTV 架構的樣子<br><img src=\"/2023/07/29/RefactorMVC/MVC.png\"></p>\n<p>其實滿簡單的，就是Model負責與資料庫有關的操作，Controller和其他兩層溝通，View負責畫面顯示<br>以傳統的MVC來說，甚至會有前後端不分離也就是伺服器端渲染（Server-Side Rendering，簡稱 SSR）的狀況<br>但這個模式到現在，隨著前端技術的進步，以及開始重視團隊協作的現在，過去的 SSR 其實顯得有非常多的問題，像是開發效率、維護性等等。</p>\n<p>現代的MVC可能連View那一層都不會有了(後端的部分)，因為View的部分已經給了前端</p>\n<h2 id=\"調整過後的架構\"><a href=\"#調整過後的架構\" class=\"headerlink\" title=\"調整過後的架構\"></a>調整過後的架構</h2><p>這邊我從<a href=\"https://github.com/bxcodec\">bxcodec</a>的<a href=\"https://github.com/bxcodec/go-clean-arch\">go-clean-arch</a>得到很大的靈感<br>以上方的 <a href=\"#%E4%B8%80%E8%88%ACMVC%E6%9E%B6%E6%A7%8B\"><strong>註冊會員</strong></a> 為例子，我們需要驗證、儲存資料、金流和物流以及回傳資料<br>我們可以得到這張圖<br><img src=\"/2023/07/29/RefactorMVC/newMVC.png\"></p>\n<p>搭配一下時序圖來了解狀況<br><img src=\"/2023/07/29/RefactorMVC/newMVCSequence.png\"></p>\n<p>我們可以得知這個順序是</p>\n<ol>\n<li>Request 進入 Controller</li>\n<li>Controller 向 Validator 驗證使用者的資料</li>\n<li>Controller 向 UseCase 傳遞資料(處理業務邏輯，像是金流物流)</li>\n<li>Controller 向 Repository 請求建立資料</li>\n<li>Repository 向 Model 請求建立資料</li>\n<li>Model 向 DB 建立資料</li>\n<li>Controller 向 Formatter 請求回傳資料</li>\n<li>Controller 給出 Response</li>\n</ol>\n<p>也就是說，我們這邊盡量讓Controller只做資料傳遞的動作，不處理其他的業務邏輯<br>Code大概會長這樣(這邊先不講DI的部分，有時間這個移到鐵人賽再說XD)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemberController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$member_validator</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$member_use_case</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$member_repository</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$member_formatter</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_ invoke__\">__construct</span>(MemberValidator <span class=\"variable\">$member_validator</span>, MemberUseCase <span class=\"variable\">$member_use_case</span>, MemberRepository <span class=\"variable\">$member_repository</span>, MemberFormatter <span class=\"variable\">$member_formatter</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;member_validator = <span class=\"variable\">$member_validator</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;member_use_case = <span class=\"variable\">$member_use_case</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;member_repository = <span class=\"variable\">$member_repository</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;member_formatter = <span class=\"variable\">$member_formatter</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerMember</span>(<span class=\"params\">Request <span class=\"variable\">$request</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$request_data</span> = <span class=\"variable\">$request</span>-&gt;data;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 驗證請求參數</span></span><br><span class=\"line\">        <span class=\"variable\">$error_key_group</span> = <span class=\"variable language_\">$this</span>-&gt;member_validator-&gt;<span class=\"title function_ invoke__\">getRegisterMemberErrorKeyGroup</span>(<span class=\"variable\">$request</span>-&gt;data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">count</span>(error_key_group) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$validate_fail_response_data</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$member_formatter</span>-&gt;<span class=\"title function_ invoke__\">getValidateFailResponseData</span>(<span class=\"variable\">$error_key_group</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>(<span class=\"variable\">$validate_fail_response_data</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 金流和物流</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">$this</span>-&gt;member_use_case-&gt;<span class=\"title function_ invoke__\">isPaySuccessful</span>(<span class=\"variable\">$request_data</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$pay_fail_response_data</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$member_formatter</span>-&gt;<span class=\"title function_ invoke__\">getPayFailResponseData</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>(<span class=\"variable\">$pay_fail_response_data</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">$this</span>-&gt;member_use_case-&gt;<span class=\"title function_ invoke__\">isGiftSuccessful</span>(<span class=\"variable\">$request_data</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$gift_fail_response_data</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$member_formatter</span>-&gt;<span class=\"title function_ invoke__\">getGiftFailResponseData</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>(<span class=\"variable\">$gift_fail_response_data</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 建立資料</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;member_repository-&gt;<span class=\"title function_ invoke__\">createMember</span>(<span class=\"variable\">$request_data</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$create_data_fail_response_data</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$member_formatter</span>-&gt;<span class=\"title function_ invoke__\">getCreateDataFailResponseData</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>(<span class=\"variable\">$create_data_fail_response_data</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$success_response_data</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$member_formatter</span>-&gt;<span class=\"title function_ invoke__\">getSuccessResponseData</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">response</span>()-&gt;<span class=\"title function_ invoke__\">json</span>(<span class=\"variable\">$success_response_data</span>, <span class=\"number\">201</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>這麼做最大的好處有幾個</p>\n<ol>\n<li>我可以撰寫單元測試，來驗證每一個function的邏輯是否正確</li>\n<li>以後要加什麼功能，我可以很清楚知道我要在哪裡做</li>\n<li>他不再是互相依賴的關係，而是有需要才會使用到</li>\n</ol>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>如果我真的要把裡面用到的概念全部講完，大概要好幾篇文章<br>這個留到鐵人賽再來說吧，如果我有參賽，沒意外應該是會講Laravel的開發流程，且不走傳統的方式，但可惜我對前端不熟，我不太會寫 HTML，可能我也不太會花時間去講太多 Blade 的東西<br>畢竟我也滿討厭把前端跟後端的邏輯寫在一起的。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://ithelp.ithome.com.tw/articles/10264853\">Day 01: 【序】– 架構與設計、代碼、工程師</a><br><a href=\"https://docs.google.com/presentation/d/1rOWNct6tu8u63Gss8hHwz8KncWkP3yI3BR8dsDs1-Sg/htmlpresent\">打造 Laravel 優美架構</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10240228\">DAY6 - 你的 Backend 可以更有彈性一點 - Clean Architecture 概念篇</a><br><a href=\"https://github.com/bxcodec/go-clean-arch\">go-clean-arch</a><br><a href=\"https://www.books.com.tw/products/0010579897\">Clean Code</a><br><a href=\"https://www.books.com.tw/products/0010598217\">Clean Coder</a><br><a href=\"https://www.books.com.tw/products/0010786994?gclid=CjwKCAjwzo2mBhAUEiwAf7wjklAbCkQ-lcmpWHJ-7lT010FskBr4LwooHgM8qhpdMoSOF-pNtMxckhoCcD4QAvD_BwE\">Clean Architecture</a></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["MVC","MTV","Refactor"],"tags":["MVC","MTV","Refactor"]},{"title":"Swift如何在windows系統和Linux上安裝","url":"/2022/09/05/SwiftInstall/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上個月剛入手了一台 M1pro版本的 macPro 做為學習 swift 以及寫 sideproject 的生產力工具。</p>\n<p>其實之前就想嘗試在 Linux 和 Windows 上跑 swift，只是那時候卡在一個問題：這兩個平台都沒辦法運行 Xcode</p>\n<p>Xcode 作為一個 IDE，他最強大的功能就是可以讓你邊寫邊看程式在裝置上的結果如何，但可惜其他平台找了那麼久終究沒有找到方法(歡迎各路大神提供方法)</p>\n<p>不過我本身比較習慣看大螢幕，也比較習慣我桌機的鍵盤(在筆電上打字速度降低 50%…</p>\n<p>所以這幾天半夜睡不著就決定研究怎麼在 Windows 還有 Linux 上安裝 swift</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h1><p>我們先到 <strong><a href=\"https://www.swift.org/download/\">官方網站下載</a></strong> 我們要的 Swift 版本，並且安裝<br><img src=\"/2022/09/05/SwiftInstall/swiftinstall.png\"></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"Windows系統\"><a href=\"#Windows系統\" class=\"headerlink\" title=\"Windows系統\"></a>Windows系統</h1><p>之後到搜尋用系統管理者權限開啟 x64 Native Tools Command Prompt for VS 2019</p>\n<p>再來執行以下指令</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\ucrt.modulemap &quot;<span class=\"variable\">%UniversalCRTSdkDir%</span>\\Include\\<span class=\"variable\">%UCRTVersion%</span>\\ucrt\\module.modulemap&quot;</span><br><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\visualc.modulemap &quot;<span class=\"variable\">%VCToolsInstallDir%</span>\\include\\module.modulemap&quot;</span><br><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\visualc.apinotes &quot;<span class=\"variable\">%VCToolsInstallDir%</span>\\include\\visualc.apinotes&quot;</span><br><span class=\"line\"><span class=\"built_in\">copy</span> <span class=\"variable\">%SDKROOT%</span>\\usr\\share\\winsdk.modulemap &quot;<span class=\"variable\">%UniversalCRTSdkDir%</span>\\Include\\<span class=\"variable\">%UCRTVersion%</span>\\um\\module.modulemap&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>之後我們的資料夾需要有這樣的路徑</strong><br>C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr\\lib\\swift\\windows\\x86_64</p>\n<p>&#96;&#96;在這邊我有遇到一個問題是，\\lib\\swift\\之後的都沒有了，不過沒關係<br>我們到<br>C:\\Library\\Developer\\Platforms\\Windows.platform\\Developer\\SDKs\\Windows.sdk\\usr\\lib\\swift\\windows</p>\n<p>把 \\lib 之後的 copy 過去就大功告成了</p>\n<p>我們來測試看看是否能運作呢</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接著執行</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">swiftc -o hello.exe hello.swift</span><br><span class=\"line\">hello.exe</span><br></pre></td></tr></table></figure>\n<p>有跑出Hello World就正確囉</p>\n<p><span style=\"border-bottom: thick double #32a1ce;\">hello.exe 可以換成你想要的任何名稱</span></p>\n<p><span style=\"border-bottom: thick double #32a1ce;\">hello.swift 是要編譯的檔名</span></p>\n<blockquote>\n<p>不過這個方法有個問題就是他沒辦法像 macOS 一樣輸入 swift 之後就有互動模式</p>\n</blockquote>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"WSL-2-安裝-swift\"><a href=\"#WSL-2-安裝-swift\" class=\"headerlink\" title=\"WSL 2 安裝 swift\"></a>WSL 2 安裝 swift</h1><p>檔案我們使用 Ubuntu 的，下載完記得解壓縮</p>\n<h2 id=\"WSL-2-的事前準備\"><a href=\"#WSL-2-的事前準備\" class=\"headerlink\" title=\"WSL 2 的事前準備\"></a>WSL 2 的事前準備</h2><p>當然要先安裝好 wsl2</p>\n<p>這邊提供一些官方說明，有興趣的朋友自己去看，這邊暫時不介紹</p>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-tw/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\">WSL安裝前的事前準備 - 啟動HyperV</a><br><a href=\"https://docs.microsoft.com/zh-tw/windows/wsl/install\">WSL安裝</a><br><a href=\"https://docs.microsoft.com/zh-tw/windows/wsl/install-manual?source=recommendations\">另一個安裝方法 - 我個人用這個</a><br><a href=\"https://www.google.com.tw/?hl=zh_TW\">知識泉源</a></p>\n</blockquote>\n<h2 id=\"安裝-swift\"><a href=\"#安裝-swift\" class=\"headerlink\" title=\"安裝 swift\"></a>安裝 swift</h2><p>我們需要先有 bashrc</p>\n<p>如果沒有：<a href=\"https://askubuntu.com/questions/127056/where-is-bashrc\">教學</a></p>\n<p>再來我們輸入下面這個指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/mnt/your_swift_file_path/swift-5.6.2-RELEASE-ubuntu20.04/usr/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>再來我們就可以檢查看看有沒有安裝完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">swift --version</span><br></pre></td></tr></table></figure>\n\n<p>有出現版本就代表完成了</p>\n<p>只是他一樣也沒有互動模式這樣<br>而且好像還要每次都重打上面那個指令</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"Linux-上安裝-Swift-這邊使用-Ubuntu-20-04-LTS\"><a href=\"#Linux-上安裝-Swift-這邊使用-Ubuntu-20-04-LTS\" class=\"headerlink\" title=\"Linux 上安裝 Swift (這邊使用 Ubuntu 20.04 LTS)\"></a>Linux 上安裝 Swift (這邊使用 Ubuntu 20.04 LTS)</h1><p>下載完之後我們開啟 Terminal，可以到Downloads資料夾右鍵開啟，或示輸入指令切換到 Downloads 資料夾</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/Downloads</span><br></pre></td></tr></table></figure>\n\n<p>再來輸入指令解壓縮</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tar xzf your_download_swift_file</span><br></pre></td></tr></table></figure>\n\n<p>再來轉移到另一個資料夾 &#x2F;usr&#x2F;share&#x2F;swift 底下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mv</span> your_tar_swift_file /usr/share/swift</span><br></pre></td></tr></table></figure>\n\n<p>最後設置為環境變數</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=/usr/share/swift/usr/bin:<span class=\"variable\">$PATH</span>&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>再來測試</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">swift -version</span><br></pre></td></tr></table></figure>\n\n<p>有跑出版本就代表安裝完成了</p>\n<p>再來 Linux上是可以輸入 swift 指令的，而且速度海放 Windows 好幾條街</p>\n<p>個人比較推薦在 Linux 上安裝(當然你有macOS的電腦就不用理我了</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h1><p>這幾個方法充其量就是給大家練習 swift 的基本語法而已，真的要開發 ios 的程式還是要自己去買一台蘋果電腦，畢竟這只能看語法有沒有問題而以，沒辦法觀看執行結果。</p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<h1 id=\"聲明\"><a href=\"#聲明\" class=\"headerlink\" title=\"聲明\"></a>聲明</h1><p>本人只是將安裝 Swift 的過程記錄下來，並且整合成一篇筆記<br>如有侵權煩請告知<br>This writings just record the swift install process. If infringement, please be informed.</p>\n<h1 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h1><p><a href=\"https://www.swift.org/download/\">https://www.swift.org/download/</a><br><a href=\"https://opensourcedoc.com/blog/swift-on-windows/\">https://opensourcedoc.com/blog/swift-on-windows/</a><br><a href=\"https://blog.csdn.net/zaiduoluo/article/details/106544944\">https://blog.csdn.net/zaiduoluo/article/details/106544944</a><br><a href=\"https://askubuntu.com/questions/127056/where-is-bashrc\">https://askubuntu.com/questions/127056/where-is-bashrc</a><br><a href=\"https://ubunlog.com/zh-TW/swift-instala-este-lenguaje-de-programacion-en-ubuntu-20-04/\">https://ubunlog.com/zh-TW/swift-instala-este-lenguaje-de-programacion-en-ubuntu-20-04/</a></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["Swift","Install"],"tags":["Swift"]},{"title":"什麼是 Load Balancer","url":"/2023/05/27/WhatIsLoadBalancer/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>現在也是個工作第二年的後端了，是時候該學一些系統設計的知識</p>\n<p>系統設計顧名思義是指設計軟體系統的過程，例如說我們要設計一個大型社交網站<br>那我們可能就會需要非常非常多的技術，包含：用什麼語言去寫Server、使用什麼樣的Database、如果說系統Loading太大該怎麼辦等等，族繁不及備載。</p>\n<p>要考量的點實在太多了，而且也沒有所謂的正確答案，端看能不能有效解決問題<br>能夠利用手上會的知識，去整合並且設計系統</p>\n<p>另外面試的時候不會要你真的設計一個超級完整的系統，每個細節都要做到<br>不會，因為時間不夠，而且要你在臨場想出來也是強人所難，別人花了好幾次會議好幾個月甚至好幾年才構思出來的系統，要你在45~60分鐘內想出來，屬實過分。<br>所以我們在面試的時候必須持續溝通，詢問面試官說，這邊的需求，你想怎麼做等等。</p>\n<p>系統設計面試都是開放式的問題，沒有標準答案，所以要慢慢限縮問題的範圍，而且實際面對需求或客戶，本來也就是這樣，每個人的認知都不同，你的大跟我的大應該是不同的。這時候如果沒有釐清需求，直接給他做下去，相信我87%痛苦的都是自己。</p>\n<p>好了，我們先來介紹什麼是Load Balancer吧</p>\n<span id=\"more\"></span>\n\n<h1 id=\"什麼是Load-Balancer\"><a href=\"#什麼是Load-Balancer\" class=\"headerlink\" title=\"什麼是Load Balancer\"></a>什麼是Load Balancer</h1><p>負責分散每個 Server 或是 Service 的壓力，就是 Load Balancer 的工作<br><img src=\"/2023/05/27/WhatIsLoadBalancer/LoadBalancer.jpg\"></p>\n<p>假設今天我們有三台 Server(A, B, C)， Load Balancer 的工作就必須要把流量平均分布到各個Server上<br>避免流量過度集中在某個 Server 而過度爆掉</p>\n<p>你可以想像，Server 是員工，Load Balancer就像是我們的主管一樣，負責把每個任務每個任務平均分配到每個人手上(如果你的主管沒有，那我也沒辦法🌚)</p>\n<h1 id=\"常見的-Public-Rule\"><a href=\"#常見的-Public-Rule\" class=\"headerlink\" title=\"常見的 Public Rule\"></a>常見的 Public Rule</h1><ul>\n<li><p>Least Connection Method: 就是我們剛剛說的平均分配每個流量給不同的Server的方式</p>\n</li>\n<li><p>Least Response Time Method: 分配給沒有那麼多用戶端連結的Server，並且那個Server的回應時間是最短的</p>\n<details>\n<summary>圖片</summary>\n<img src=\"LeastResponseTimeMethod.png\" id=\"image\" class=\"collapsed\">\n</details>\n</li>\n<li><p>Least Bandwidth Method: 把流量分到目前每秒頻寬(MB)最小的Server</p>\n</li>\n<li><p>Round Robin Method: 按照順序分，如果 Server 掛了就跳過，適用於硬體配備相差不多的 Server 上</p>\n<ul>\n<li>IP Hash: 按照使用者的 IP 去分</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Redundant-Load-Balancer\"><a href=\"#Redundant-Load-Balancer\" class=\"headerlink\" title=\"Redundant Load Balancer\"></a>Redundant Load Balancer</h1><p>防止 Load Balancer 掛了還有另一個 Load Balancer 可以用</p>\n<h1 id=\"聲明\"><a href=\"#聲明\" class=\"headerlink\" title=\"聲明\"></a>聲明</h1><p>本人只是將學習 Load Balancer 的過程記錄下來，並且整合成一篇筆記<br>如有侵權煩請告知<br>This writings just record the swift install process. If infringement, please be informed.</p>\n<h1 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h1><p><a href=\"https://www.youtube.com/watch?v=32946vRu4RA&amp;ab_channel=%E4%BB%8A%E5%A4%A9%E6%AF%94%E6%98%A8%E5%A4%A9%E5%8E%B2%E5%AE%B3\">https://www.youtube.com/watch?v=32946vRu4RA&amp;ab_channel=%E4%BB%8A%E5%A4%A9%E6%AF%94%E6%98%A8%E5%A4%A9%E5%8E%B2%E5%AE%B3</a></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["System Design"],"tags":["Load Balancer","note"]},{"title":"【Day-6】SOLID - 單一職責原則(SRP)","url":"/2023/09/06/IronDay6/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10313524\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接下來要介紹SOLID的原則，會一一介紹<br>今天先從SRP開始</p>\n<span id=\"more\"></span>\n\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>單一職責原則(SRP, Single Responsibility Principle)；這很容易讓其他人粗暴地將其理解為每個模組都只做一件事。<br>先說，對於函式來說確實是只做一件事情，但對於模組則不是。<br>根據Clean Architecture的說法是這樣的</p>\n<blockquote>\n<p>一個模組應該只對唯一的一個角色負責。<br>-Clean Architecture(P54)</p>\n</blockquote>\n<p>聽起來是有聽沒有懂對吧<br>我們直接當背骨仔來違反他看看</p>\n<h1 id=\"違反的案例-意外重複\"><a href=\"#違反的案例-意外重複\" class=\"headerlink\" title=\"違反的案例: 意外重複\"></a>違反的案例: 意外重複</h1><p>舉個案例<br>假設我今天有一套計算全部學校學生成績的系統<br>學校有三種學生：a, b, c<br>實際上這三種學生考試的科目和成績計算方式完全不同(例如某些科目需要加權等等)<br>但我a, b, c三種學生都依賴同一個底層function來計算最終成績(假設名稱為<code>foo()</code>)</p>\n<p>有一天b種類的學生需要更改成績的計算方式<br>所以就有某個倒楣鬼去做了修改，但他也沒有注意到它實際上有呼叫到<code>foo()</code><br>結果就這樣上線了<br>直到運作了一陣子才發現成績全部都是錯的</p>\n<p>也就是不同角色共用了某個function而導致這個狀況，在不知情的情況下<br>我們修改了功能，進而導致後面的問題產生</p>\n<p>所以我們要怎麼解決這些問題</p>\n<blockquote>\n<p>SRP說: 分開不同角色所依賴的程式碼<br>-Clean Architecture(P56)</p>\n</blockquote>\n<h1 id=\"解決方案\"><a href=\"#解決方案\" class=\"headerlink\" title=\"解決方案\"></a>解決方案</h1><p>最明顯的方法就是我們去了解每個種類的學生<br>也就是想辦法把他們三種分開，變成三個可被追蹤的不同個體<br>套用到程式上就是<br><strong>實體化不同的類別，使他們不瞭解彼此</strong></p>\n<p>這個Controller就只負責某個種類的學生<br>其他全部與他無關，也不清楚需要做甚麼</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Architecture(ch.7)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Architecture","SOLID","SRP"]},{"title":"Leetcode - 997 with Python and Golang","url":"/2023/01/28/leetcode997/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>紀錄一下解決 Leetcode 第 997 題的過程</p>\n<p><a href=\"https://leetcode.com/problems/find-the-town-judge/\">我們先來看題目 - Find the Town Judge</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h1><p>In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.</p>\n<p>If the town judge exists, then:</p>\n<p>The town judge trusts nobody.<br>Everybody (except for the town judge) trusts the town judge.<br>There is exactly one person that satisfies properties 1 and 2.<br>You are given an array trust where trust[i] &#x3D; [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.</p>\n<p>Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: n = 2, trust = [[1,2]]</span><br><span class=\"line\">Output: 2</span><br></pre></td></tr></table></figure>\n\n<p>Example 2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: n = 3, trust = [[1,3],[2,3]]</span><br><span class=\"line\">Output: 3</span><br></pre></td></tr></table></figure>\n\n<p>Example 3:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: n = 3, trust = [[1,3],[2,3],[3,1]]</span><br><span class=\"line\">Output: -1</span><br></pre></td></tr></table></figure>\n\n<p>Constraints:</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 1000<br>0 &lt;&#x3D; trust.length &lt;&#x3D; 104<br>trust[i].length &#x3D;&#x3D; 2<br>All the pairs of trust are unique.<br>ai !&#x3D; bi<br>1 &lt;&#x3D; ai, bi &lt;&#x3D; n</p>\n<p>題目要求我們要找出城鎮法官，而這座城鎮的人都相信法官，但法官不信任任何人<br>基於這個條件來找出法官<br>n 是總人數<br>trust[0] 相信 trust[1]</p>\n<h1 id=\"解題過程\"><a href=\"#解題過程\" class=\"headerlink\" title=\"解題過程\"></a>解題過程</h1><p>一開始覺得這題簡單到爆炸，想說只要有相信人(出現在trust[0])，那個人就一定不是法官<br>所以想出這個方式</p>\n<h2 id=\"Wrong-Answer\"><a href=\"#Wrong-Answer\" class=\"headerlink\" title=\"Wrong Answer\"></a>Wrong Answer</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">Wrong Answer</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findJudge</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span>, trust: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        all_people = &#123;i: <span class=\"literal\">None</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> path <span class=\"keyword\">in</span> trust:</span><br><span class=\"line\">            all_people.pop(path[<span class=\"number\">1</span>], <span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> all_people.keys():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> k</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>但這個解答沒有考慮到法官必須要被每個人相信(思考不夠周全)<br>所以我們必須要知道更詳細的資料</p>\n<p>根據上面的 code 我們稍微修改一下<br>將 <code>all_people</code> 的 value 改為 <code>0</code><br>0: 多少個人信任這個人 (法官必須被所有人信任)<br>然後只要出現在 trust[0] 的都可以刪掉 (法官不信任任何人)</p>\n<h2 id=\"使用Python\"><a href=\"#使用Python\" class=\"headerlink\" title=\"使用Python\"></a>使用Python</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findJudge</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span>, trust: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        all_people = &#123;i: <span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trust:</span><br><span class=\"line\">            all_people.pop(i[<span class=\"number\">0</span>], <span class=\"literal\">None</span>)</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                all_people[i[<span class=\"number\">1</span>]] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> all_people.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> k</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Golang\"><a href=\"#使用-Golang\" class=\"headerlink\" title=\"使用 Golang\"></a>使用 Golang</h2><figure class=\"highlight golang\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findJudge</span><span class=\"params\">(n <span class=\"type\">int</span>, trust [][]<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    TrustCounter := <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">    result := <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"comment\">// Make map</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++&#123;</span><br><span class=\"line\">        TrustCounter[i] = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> trust &#123;</span><br><span class=\"line\">        <span class=\"built_in\">delete</span>(TrustCounter, v[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> _, ok := TrustCounter[v[<span class=\"number\">1</span>]]; ok &#123;</span><br><span class=\"line\">            TrustCounter[v[<span class=\"number\">1</span>]] += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> TrustCounter&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v == n - <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            result = k</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Swift\"><a href=\"#使用-Swift\" class=\"headerlink\" title=\"使用 Swift\"></a>使用 Swift</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">findJudge</span>(<span class=\"keyword\">_</span> <span class=\"params\">n</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">trust</span>: [[<span class=\"type\">Int</span>]]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> trustCount: [<span class=\"type\">Int</span>: <span class=\"type\">Int</span>] <span class=\"operator\">=</span> [:]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span>n &#123;</span><br><span class=\"line\">            trustCount[i] <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trust &#123;</span><br><span class=\"line\">            trustCount.removeValue(forKey: i[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">var</span> beTrusted <span class=\"operator\">=</span> trustCount[i[<span class=\"number\">1</span>]]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> beTrusted <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                trustCount[i[<span class=\"number\">1</span>]] <span class=\"operator\">=</span> beTrusted<span class=\"operator\">!</span> <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> trustCount&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v <span class=\"operator\">==</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> k</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"operator\">-</span><span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"另一種方法\"><a href=\"#另一種方法\" class=\"headerlink\" title=\"另一種方法\"></a>另一種方法</h1><p>我們可以用 list (golang: slice) 來完成<br>首先宣告一個 list(假設叫 trustCount)，長度為 n + 1<br>再來遍歷trust<br>第一個人的 trustCount 必須 -1 (法官不能相信任何人，所以要減，讓後面條件不會過)<br>第二個人的 trustCount 必須 +1<br>最後遍歷trustCount</p>\n<h2 id=\"使用Python-1\"><a href=\"#使用Python-1\" class=\"headerlink\" title=\"使用Python\"></a>使用Python</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findJudge</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span>, trust: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        trust_count = [<span class=\"number\">0</span>] * (n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> trust:</span><br><span class=\"line\">            trust_count[a] -= <span class=\"number\">1</span></span><br><span class=\"line\">            trust_count[b] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> trust_count[i] == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Golang\"><a href=\"#使用Golang\" class=\"headerlink\" title=\"使用Golang\"></a>使用Golang</h2><figure class=\"highlight golang\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findJudge</span><span class=\"params\">(n <span class=\"type\">int</span>, trust [][]<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    trustCount := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, t := <span class=\"keyword\">range</span> trust &#123;</span><br><span class=\"line\">        trustCount[t[<span class=\"number\">0</span>]]--</span><br><span class=\"line\">        trustCount[t[<span class=\"number\">1</span>]]++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= N; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> trustCount[i] == n - <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Swift\"><a href=\"#使用Swift\" class=\"headerlink\" title=\"使用Swift\"></a>使用Swift</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">findJudge</span>(<span class=\"keyword\">_</span> <span class=\"params\">n</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">trust</span>: [[<span class=\"type\">Int</span>]]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> trustCount <span class=\"operator\">=</span> <span class=\"type\">Array</span>(repeating: <span class=\"number\">0</span>, count: n <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trust &#123;</span><br><span class=\"line\">            trustCount[i[<span class=\"number\">0</span>]] <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            trustCount[i[<span class=\"number\">1</span>]] <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span>n &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> trustCount[i] <span class=\"operator\">==</span> n <span class=\"operator\">-</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"operator\">-</span><span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["Python","Golang","Swift","leetcode"],"tags":["Swift","Python","Golang","leetcode"]},{"title":"Python Tkinter 之你該仔細想想是否要用Tk","url":"/2022/10/08/fucktk/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>目前接下的 SideProject 也告一個段落了，用了兩個月的時間寫出一個小系統，這其中最困難的地方莫過於<strong>幾乎全部是我通靈出來的</strong></p>\n<p>如果有下次，我希望能夠和我好好討論一些細節，不用讓我那麼痛苦。</p>\n<p>好了廢話說到這</p>\n<p>接下來是正題，我們繼續看下去</p>\n<span id=\"more\"></span>\n\n<h1 id=\"tk的優勢\"><a href=\"#tk的優勢\" class=\"headerlink\" title=\"tk的優勢\"></a>tk的優勢</h1><p>我們先來說說tk的優勢好了，<del>不然等等應該是說不到了</del></p>\n<p>假設你是個新手，剛接觸Python，想做點東西來證明自己<br>想要做一個<strong>簡單的功能</strong>並且帶有介面<br>或是你超級愛tk的<br>那恭喜tk非常適合你們使用</p>\n<p>其他人就建議考慮看看別的吧(pyqt之類的)</p>\n<p>tk入門其實非常簡單，基本上效果簡單功能簡單<br>而且還內建在Python裡面</p>\n<p>好了，接下來就是滿滿的問題了</p>\n<h1 id=\"本人的狀況\"><a href=\"#本人的狀況\" class=\"headerlink\" title=\"本人的狀況\"></a>本人的狀況</h1><p>其實會寫這篇也是因為有個比較特殊的狀況，之前的文章有提過，我的桌機是使用Windows系統，但筆電是使用MacOS</p>\n<p>這邊就衍伸出一個問題，Python 的 tk 在兩個系統上同樣一段 Code 表現就會差非常多</p>\n<p>這就導致，<strong>在Windows上寫的，沒辦法完全照搬到MacOS上</strong></p>\n<p>這對我來說其實非常痛苦</p>\n<p>舉個例子<br>MacOS上，tk其實不太需要額外多做美化就還不錯了，滿簡約的<br><img src=\"/MacTk.png\"></p>\n<p>但在Windows上，就是那個醜醜的灰色windows98風格介面</p>\n<h1 id=\"更多的差異\"><a href=\"#更多的差異\" class=\"headerlink\" title=\"更多的差異\"></a>更多的差異</h1><p>那這也就算了，大不了我事先做個系統判斷吧，先判斷的我的系統是什麼，我再來決定我要走哪個方法</p>\n<p>但事情當然沒那麼簡單</p>\n<p>隨著專案越寫越大，越寫越多，需要考量的情況越來越多，可能需要先鎖住主視窗不給使用者用</p>\n<p>恭喜，MacOS的tk不能使用<code>-disabled</code> 這個參數，因為根本沒有遇到就報錯</p>\n<p>你說一樣啊我繼續多加幾個條件判斷就好了</p>\n<p>是也沒錯，總共多判斷個幾十幾百次就好</p>\n<p>最後一個比較令人崩潰的是MessageBox的介面完全不一樣</p>\n<p>在MacOS上，MessageBox長這樣(以<strong>Showerror</strong>為例)</p>\n<p><img src=\"/MacOSMessageBox.png\"></p>\n<p>有沒有發現Title跟圖示都怪怪的？？</p>\n<p>對我而言這其實已經到不能接受了，Showerror是為了顯示錯誤訊息，Title不見就算了，連警告標誌都沒有是哪招？？</p>\n<h1 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h1><p>我覺得tk最不友善的地方就是這裡 - <strong>排版</strong></p>\n<p>tk的排版大致上可分為三種</p>\n<blockquote>\n<p>pack<br>grid<br>place</p>\n</blockquote>\n<p>這三種各有優缺點</p>\n<blockquote>\n<p>pack最簡單，但元件一多擺起來最醜也最難排<br>grid應該是三者中評價最好的，最推薦學這個，但如果你要擺到你想要的位置，你要多放很多沒有用的元件來達成這件事，這也是我覺得最反邏輯的地方<br>place可以放到任何你想要的地方，且可以搭配上述兩者其中一種使用，但只要你的視窗大小改變，你的元件沒有特別運算的話，一定位置跑掉</p>\n</blockquote>\n<p>而且為了要做好看的排版，你就必須反覆測試這樣好不好看<br>這都還沒算上你需要幫元件美化跟設計長寬高來符合排版<br>寫起來完全沒有比較簡單，反而還非常複雜且麻煩</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>tk本身功能其實也算是偏陽春的<br>包含很多實用的元件都必須從ttk導入<br>甚至是額外安裝，像是 Calendar(選擇日期)</p>\n<p>如果你要做出可搜尋的複選下拉式選單你甚至要自己從其他元件生出來</p>\n<h1 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h1><p>這篇文章主要都是個人的看法<br>我也看過用tk就寫得嚇嚇叫的人<br>但每個開發者都有自己偏好的套件甚至語言<br>不用去說服別人說這個優點很好啊怎樣怎樣<br><strong>你習慣別人不見得習慣</strong><br><strong>你覺得是優點的東西或許別人不以為意</strong><br><strong>你覺得tk好用那就好用，恭喜你找到自己適合的工具</strong></p>\n<style>\nhr.style-one {\n    border: 0;\n    height: 5px;\n    background: #333;\n    background-image: linear-gradient(to right, #ccc, #333, #ccc);\n}\n</style>\n<hr class=\"style-one\" />\n\n<p>如果有錯誤的部份，歡迎指正，謝謝。<br>如果你喜歡這篇文章，請幫我拍手<br>只需要註冊會員就可以囉，完全不用花費任何一毛錢就可以用來鼓裡創作者囉</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["Python","GUI"],"tags":["Python","Tkinter"]},{"title":"【Day-10】依賴反向原則(DIP)","url":"/2023/09/10/IronDay10/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10316430\">it邦</a></p>\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>今天要介紹依賴反向原則(DIP, Dependency Inversion Principle)</p>\n<blockquote>\n<p>最靈活的系統是『原始碼的依賴關係指涉及抽象不涉及具體』<br>-Clean Architecture(P.75)</p>\n</blockquote>\n<p>上述這段話的意思就是，我們應該將我的模組依賴於抽象概念<br>但這段話其實不切實際，特別像是Python這些大量依賴第三方套件的語言<br>基本上我們要做的功能已經有人幫我們做好了<br>甚至我們連依賴<code>list.count()</code>這種都屬於依賴具體物件的方法<br>這種情況我們不可也不該避免</p>\n<p>所以在應用DIP時，我們可以忽略作業系統的穩定背景，我們也可以信任他們不會改變。<br>要注意的是，系統中<strong>容易變化</strong>的具體元素。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h1><p>同樣以php為例子</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bark</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;汪!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;喵~~&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PetOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$dog</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$cat</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;dog = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cat = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">playWithPets</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$dogSound</span> = <span class=\"variable language_\">$this</span>-&gt;dog-&gt;<span class=\"title function_ invoke__\">bark</span>();</span><br><span class=\"line\">        <span class=\"variable\">$catSound</span> = <span class=\"variable language_\">$this</span>-&gt;cat-&gt;<span class=\"title function_ invoke__\">meow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Dog: <span class=\"subst\">$dogSound</span>, Cat: <span class=\"subst\">$catSound</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我們可以看到<code>PetOwner</code>依賴於<code>Dog</code>和<code>Cat</code></p>\n<p>假設未來我要多領養幾隻寵物，我就必須一直持續在<code>petOwner</code>裡面一直新增<br>持續的對<code>petOwner</code>做修改<br>萬一上層的class要做修改，那更改的範圍就會更大</p>\n<p>換個方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PetSound</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeSound</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title\">PetSound</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeSound</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;汪!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">PetSound</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeSound</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;喵~~&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PetOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$pets</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addPet</span>(<span class=\"params\">PetSound <span class=\"variable\">$pet</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;pets[] = <span class=\"variable\">$pet</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">playWithPets</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$sounds</span> = [];</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"variable language_\">$this</span>-&gt;pets <span class=\"keyword\">as</span> <span class=\"variable\">$pet</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$sounds</span>[] = <span class=\"variable\">$pet</span>-&gt;<span class=\"title function_ invoke__\">makeSound</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&quot;, &quot;</span>, <span class=\"variable\">$sounds</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在這個例子中，我們引入了一個 <code>PetSound</code> 抽象介面，並讓 <code>Dog</code> 和 <code>Cat</code> 類實現這個介面<br><code>PetOwner</code> 類不再直接創建寵物的實例，而是通過 <code>addPet</code> 方法將寵物加入，並且在 <code>playWithPets</code> 方法中調用了抽象介面的方法。</p>\n<p>這種做法降低了耦合度，使得我們可以較容易地擴展或修改代碼，而不會影響其他部分。這符合 DIP 原則的理念。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Architecture(ch.11)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","Clean Architecture","SOLID","LSP"]},{"title":"【Day-11】其他軟體開發原則(簡介)","url":"/2023/09/11/IronDay11/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10316741\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天我們來簡單介紹SOLID以外的兩個軟體開發原則<br>分別是DRY以及KISS</p>\n<span id=\"more\"></span>\n\n<h1 id=\"DRY\"><a href=\"#DRY\" class=\"headerlink\" title=\"DRY\"></a>DRY</h1><p>DRY，意旨Don’t Repeat Yourself，也就是不要重複你自己<br>這非常的簡單，也就是少做重複的部分<br>我們可以將重複的部分將他轉換為共用的function在來使用<br>但絕對絕對不是不可以有任何重複的部分<br>而是指在相同的邏輯上，不要去重複使用</p>\n<h1 id=\"KISS\"><a href=\"#KISS\" class=\"headerlink\" title=\"KISS\"></a>KISS</h1><p>KISS, 意旨Keep It Simple, Stupid<br>KISS 原則的目標是確保軟體設計和開發過程不會變得過於困難，並降低錯誤和問題的風險。<br>這核心的概念就是，我們要將程式碼的邏輯盡可能的保持其他人一看就懂<br>在濃縮一下就是 - <strong>大道至簡</strong></p>\n<blockquote>\n<p><em><strong>There should be one– and preferably only one –obvious way to do it.</strong></em></p>\n<ul>\n<li>The Zen of Python</li>\n</ul>\n</blockquote>\n<p>當你發現你的Code需要一而再再而三的向其他人解釋時，你最好還是重構比較好</p>\n<p>例如說今天我們要判斷email是不是符合格式<br>比起用一大堆條件判斷，倒不如直接寫個正規表達式一行把它結束掉</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">validate_email_with_regex</span>(<span class=\"params\">email</span>):</span><br><span class=\"line\">    pattern = <span class=\"string\">r&#x27;^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.com$&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(pattern, email):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<p>不使用正規表達式，87%就會看到一大堆if-else在上面了…</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">Wiki</a><br><a href=\"https://ihower.tw/blog/archives/7181\">Kent Beck 的四個簡單程式設計原則</a></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","DRY","KISS"]},{"title":"【Day-12】單元測試","url":"/2023/09/12/IronDay12/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10317102\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天要來講一個在開發階段很重要的概念 - 單元測試</p>\n<p>前面我們講了不少軟體開發的原則<br>那有沒有想過，我們在寫完這些程式之後，要怎麼確保他能夠正常使用</p>\n<p>而這中間有一個很重要的一環就是<strong>單元測試</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>單元測試(Unit Testing)，是軟體開發中的一個重要概念<br>它是軟體測試的一個階段，用於確保程式中的個別「單元」（通常是函數、方法、類別等）能夠按照預期的方式正確運作</p>\n<p>單元測試的主要目標是在開發過程中迅速發現和修復程式碼中的錯誤，以確保軟體的品質和穩定性。</p>\n<p>舉個例子<br>假設我今天在撰寫一隻Controller是用於取得學生的成績<br>那這個Controller中間有一個use case是要計算需要顯示的資料量</p>\n<p>那我們就會針對這個最小的單元(顯示的資料量的function)去撰寫單元測試</p>\n<h1 id=\"為什麼要撰寫單元測試\"><a href=\"#為什麼要撰寫單元測試\" class=\"headerlink\" title=\"為什麼要撰寫單元測試\"></a>為什麼要撰寫單元測試</h1><p>寫單元測試有幾個好處</p>\n<ol>\n<li>確保 debug 的時間不會太長，因為撰寫過單元測試，我可以知道說這個function在大部分情況下有沒有如預期般輸出開發者需要的資訊，也就是<strong>及早發現錯誤</strong>和<strong>確保功能正確性</strong></li>\n<li>讓閱讀code的人了解這個function應該要做什麼，輸入和輸出什麼樣的資訊</li>\n<li>在重構的時候，可以去了解說我是否有正確重構這個function</li>\n<li>在 CI 階段，確保沒有問題才會放上生產環境</li>\n</ol>\n<h1 id=\"注意事項\"><a href=\"#注意事項\" class=\"headerlink\" title=\"注意事項\"></a>注意事項</h1><p>有一點需要特別注意就是，不該去依賴使用中的資料庫的資料來做單元測試<br>有可能會因為資料庫中的資料有所改動而導致不必要的錯誤</p>\n<p>因此我們可以使用模擬（Mocking）或偽造（Stubbing）的方式來建立不影響現有環境且獨立的假資料來進行單元測試</p>\n<h2 id=\"F-I-R-S-T\"><a href=\"#F-I-R-S-T\" class=\"headerlink\" title=\"F.I.R.S.T\"></a>F.I.R.S.T</h2><p>根據 Clean Code這本書的描述，整潔的測試應該遵循這五個字母的法則</p>\n<ul>\n<li>Fast(快速): 測試應該要執行快速。</li>\n<li>Independent(獨立): 測試程式不可互相依賴。每個階段都是獨立的程式。</li>\n<li>Repeatable(可重複性): 可以在<strong>任何環境</strong>重複執行。我想這非常重要，通常我們的開發環境會和Server的環境不同，所以一定要有辦法在各種環境下重複執行。</li>\n<li>Self-Validating(自我驗證): 測試程式應該輸出 boolean</li>\n<li>Timely(及時): 及時撰寫單元測試。單元測試要在產品程式之前就寫好。</li>\n</ul>\n<h1 id=\"關於習慣這件事\"><a href=\"#關於習慣這件事\" class=\"headerlink\" title=\"關於習慣這件事\"></a>關於習慣這件事</h1><p>上面都看不懂沒關係，這個才是最重要的<br>很多人會說，我沒有時間寫單元測試</p>\n<p>但我必須說，這是習慣養成的問題，第一次寫一定比較慢<br>不過一回生二回熟，寫久了就知道每個框架要怎麼撰寫單元測試<br>上面說過，寫單元測試有兩個好處就是，<strong>及早發現錯誤</strong>和<strong>確保功能正確性</strong><br>當api出錯的時候，你總不會想要一個一個慢慢通靈出哪個地方有問題</p>\n<p>撰寫單元測試後，可以直接發現哪邊有問題<br>這邊有一個要點就是，必須<strong>盡可能的考慮到所有狀況</strong><br>當然不可能想到全部的可能性<br>不過在盡可能的嘗試之後，至少出錯的機率也會大幅將低許多</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>我只能說，測試真的是一個可以講很多東西的一個章節<br>我連TDD都沒有說明<br>要講下去鐵人賽可能要60天了XD</p>\n<p>明天要講一下架構面的部分，先從伺服器端渲染(SSR)開始</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p>Clean Code(ch.9)</p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","單元測試"]},{"title":"【Day-13】伺服器端渲染(SSR)","url":"/2023/09/13/IronDay13/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10317476\">it邦</a><br>​</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>這兩天會講一點架構面的部分，分別是伺服器端渲染(SSR)以及客戶端渲染(CSR)<br>​<br>這次會從維護以及開發的角度分享這兩個架構上的區別以及各個的好處<br>還有我如何被SSR給<del>弄瞎雙眼</del></p>\n<span id=\"more\"></span>\n<p>​</p>\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>伺服器端渲染(SSR, Server Side Render)，顧名思義就是在伺服器端做渲染的架構<br>有一個傳統的講法就是所謂的<strong>前後端不分離</strong><br>​<br>這種作法通常會用於一個人開發的時候，或是<strong>極度要求SEO</strong>的場合<br>還有就是老專案非常常見這種作法<br>​</p>\n<h2 id=\"優點\"><a href=\"#優點\" class=\"headerlink\" title=\"優點\"></a>優點</h2><ol>\n<li>在第一次讀取頁面的速度會比起CSR來的快</li>\n<li>SEO分數比較高，因為不需要載入過多的JavaScript或是CSS，但這點必須先說明，<strong>現在的Google爬蟲是可以解析JavaScript的，請不要覺得Google爬蟲完全沒辦法解析，這個已經是過時資訊了</strong><br>​</li>\n</ol>\n<h2 id=\"缺點\"><a href=\"#缺點\" class=\"headerlink\" title=\"缺點\"></a>缺點</h2><ol>\n<li>第一次以外讀取的畫面的速度都比較慢，因為每次都需要重複載入</li>\n<li>Server Loading比起CSR來的重，畢竟渲染都在 Server</li>\n<li><strong>難以維護</strong></li>\n<li><strong>難以維護</strong></li>\n<li><strong>難!以!維!護!</strong><br>​</li>\n</ol>\n<h3 id=\"為什麼難以維護，冷靜點好嗎\"><a href=\"#為什麼難以維護，冷靜點好嗎\" class=\"headerlink\" title=\"為什麼難以維護，冷靜點好嗎\"></a>為什麼難以維護，冷靜點好嗎</h3><p>請聽我娓娓道來<br>SSR會將前端邏輯(顯示)以及後端邏輯(資料處理)全部混在一起<br>這會導致維護時需要確認的部分變得更多<br>​<br>再來，當這些程式緊密耦合時，連單元測試撰寫都會有困難，變成無法及早知道錯誤以及後人會不能夠確定function是否正常運作<br>​<br>然後要加一個新功能，更改的範圍也會比較大，因為你的程式碼緊密耦合在一起，根本不知道改了什麼會影響什麼<br>還有諸多問題我就不列出來了(<del>三天三夜也講不完</del>)<br>​</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>當然當今越來越重視敏捷以及前端技術日新月異的狀況下，聽起來SSR能應用的場合其實真的不多<br>最常見的還是在一個人開發，且熟悉前後端邏輯的場合下，或許時間上比較省<br>​<br>明天要來講另一個渲染技術CSR，明天見<br>​<br>​</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://www.shubo.io/rendering-patterns/\">教學 SSR 與 CSR 深度解析：從渲染方式到效能優化</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10267547\">[面試][前端]如何判斷專案要使用 CSR 還是 SSR？</a><br><a href=\"https://developers.google.com/search/docs/crawling-indexing/javascript/javascript-seo-basics?hl=zh-tw\">瞭解 JavaScript 搜尋引擎最佳化 (SEO) 基礎知識</a></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","SSR"]},{"title":"【Day-14】客戶端渲染(CSR)","url":"/2023/09/14/IronDay14/","content":"<p>文章同步於<a href=\"https://ithelp.ithome.com.tw/articles/10317859\">it邦</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>廢話不多說，今天直接來介紹客戶端渲染(CSR)</p>\n<span id=\"more\"></span>\n\n<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>客戶端渲染(CSR, Client-Side Rendering)，顧名思義就是在瀏覽器端(客戶)去做網頁渲染的工作</p>\n<p>通常會和一個概念一起討論 - 前後端分離</p>\n<h2 id=\"優點\"><a href=\"#優點\" class=\"headerlink\" title=\"優點\"></a>優點</h2><ol>\n<li>不需要一直重新載入頁面</li>\n<li>可維護性比起SSR高出許多，通常都會導入前後端分離的方式，使各自的邏輯以及職責明確切割</li>\n</ol>\n<h2 id=\"缺點\"><a href=\"#缺點\" class=\"headerlink\" title=\"缺點\"></a>缺點</h2><ol>\n<li>SEO分數會比起SSR來的低一點，不過目前前端有<a href=\"https://nuxt.com/\">nuxt.js</a>來解決普遍SEO分數過低的狀況</li>\n<li>載入有時候會比較久，因為不論需不需要都會直接下載大量資源</li>\n</ol>\n<h1 id=\"從開發、維護以及商業的角度來看CSR以及前後端分離\"><a href=\"#從開發、維護以及商業的角度來看CSR以及前後端分離\" class=\"headerlink\" title=\"從開發、維護以及商業的角度來看CSR以及前後端分離\"></a>從開發、維護以及商業的角度來看CSR以及前後端分離</h1><p>一個軟體專案，通常花最久的時間地都不會是寫Code<br>而是<strong>前期的討論</strong>和<strong>維護</strong></p>\n<p>為什麼要寫這個主體 - 軟體不是會跑就好，因為有的公司會為了快速開發而放任工程師們有寫出東西就好<br>通常這種公司都會是所謂的一條龍，也就是同一個人負責前後端，所以那個人就會以自己方便為主來做開發<br>最終的下場就是專案難以維護，程式跟人通常人跑得比程式快，<del>還有創造富有挑戰性職缺</del></p>\n<p>但你永遠不知道客戶哪天會想要增加需求，而且人的慾望是無窮無盡的，當架構以及程式碼的品質不到位的時候，就很容易持續產出爛架構跟爛扣<br>此時維護的時間就會呈直指數成長，最嚴重可能導致無法產出</p>\n<p>你會說很多專案都不需要維護，交錢就了事了，當然你要以這個比較方便的角度來說，確實是如此<br>不過程式會寫會跑是一回事，寫得好又是另一回事</p>\n<p>舉個例子</p>\n<p>以<strong>台灣的交通</strong>來說，有駕照是一回事，看看一堆老人駕照都放了幾百年都沒去開，但她依然能夠有開車的權利，只是極度讓人不放心</p>\n<p>再來假設這個老人會開車，車子能跑不要出意外就會開車，不過他可能路上上演東京甩尾，轉個彎就要把你拋出去或是常常大腳油門起步就直接暴衝，搞得你沒看到正妹帥哥就暈，抱歉那是暈船</p>\n<p>開得好的話，它可以讓你舒舒服服地抵達目的地，而且也正確的遵守駕駛的禮儀(禮讓行人、不隨意變換車道等等)，這個上述的檔次就拉開來了吧</p>\n<p>最後以商業上來說，當我的架構是彈性的，我就可以比較容易且快速地應對各種需求，此時對於在客戶間的評價也會比較高。</p>\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>第二週總算結束了，下星期會先講一下clean coder再接著說一些http協議的部分</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://www.shubo.io/rendering-patterns/\">教學 SSR 與 CSR 深度解析：從渲染方式到效能優化</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10267547\">[面試][前端]如何判斷專案要使用 CSR 還是 SSR？</a><br><a href=\"https://developers.google.com/search/docs/crawling-indexing/javascript/javascript-seo-basics?hl=zh-tw\">瞭解 JavaScript 搜尋引擎最佳化 (SEO) 基礎知識</a></p>\n<div>\n    <script type=\"text/javascript\">\n    document.write(\n        \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/wtf81905/button?referrer=\" +\n        encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n    </script>\n</div>","categories":["2023鐵人賽"],"tags":["Software Development","CSR"]}]